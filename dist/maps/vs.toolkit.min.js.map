{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","filters","filter","hayStack","oldNeedle","newNeedle","replace","pageConfig","factory","$http","_getQueryString","queryString","root","Math","random","_execute","get","then","data","error","console","log","getPageConfigs","savedSearch","rows","jsonp","response","docs","getSavedSearches","deleteSearch","id","order","beforeId","afterId"],"mappings":"AAAA,GAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAS,WAET,QAASA,GAAOC,GAEZA,EAAaC,cAAa,GAG9B,MCAAF,GAAOG,SAAW,gBDAXH,IAEXD,GAAMC,OAASA,GAChBD,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIK,GAAW,WAEX,QAASA,GAASC,GACdA,EAAKC,MAAM,gBAEf,MCCAF,GAASD,SAAW,QDDbC,IAEXL,GAAMK,SAAWA,GAClBL,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAKV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACAQ,SAAQC,OAAO,eACVC,OAAOV,EAAMC,QACbU,IAAIX,EAAMK,WAChBL,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIY,IACJ,SAAWA,GACP,YACAJ,SAAQC,OAAO,uBACVI,OAAO,gBAAiB,WACzB,MAAO,UAAUC,EAAUC,EAAWC,GAClC,MAAOF,GAASG,QAAQF,EAAWC,OAG5CJ,EAAUZ,EAAMY,UAAYZ,EAAMY,cACtCZ,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIkB,IACJ,SAAWA,GACP,YACAV,SAAQC,OAAO,2BAChBS,EAAalB,EAAMkB,aAAelB,EAAMkB,iBAC5ClB,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,uBAEXU,QAAQ,sBAAA,QAAsB,SAAUC,GACxC,YACA,SAASC,KACL,GAAIC,GAAcZ,OAAOa,KAAO,8BAEhC,OADAD,IAAe,SAAWE,KAAKC,SAGnC,QAASC,KACL,MAAON,GAAMO,IAAIN,KAAmBO,KAAK,SAAUC,GAC/C,MAAOA,IACR,SAAUC,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,OACIG,eAAgB,WACZ,MAAOP,SAKnB,IAAI3B,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIkC,IACJ,SAAWA,GACP,YACA1B,SAAQC,OAAO,4BAChByB,EAAclC,EAAMkC,cAAgBlC,EAAMkC,kBAC9ClC,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,wBAEXU,QAAQ,uBAAA,QAAuB,SAAUC,GACzC,YAMA,SAASC,KACL,GAAIc,GAAO,IACPb,EAAcZ,OAAOa,KAAO,sBAIhC,OAHAD,IAAe,QAAUa,EAAO,SAAWX,KAAKC,SAChDH,GAAe,uHACfA,GAAe,kCAGnB,QAASI,KACL,MAAON,GAAMgB,MAAMf,KAAmBO,KAAK,SAAUC,GACjD,MAAOA,GAAKA,KAAKQ,SAASC,MAC3B,SAAUR,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,OACIS,iBAAkB,WACd,MAAOb,MAOXc,aAAc,SAAUC,GACpB,MAAOrB,GAAAA,UAAaV,OAAOa,KAAO,4BAA8BkB,GAAIb,KAAK,eAM7Ec,MAAO,SAAUD,EAAIE,EAAUC,GAC3B,GAAIf,GAAO,EACM,QAAbc,IACAd,GAAQ,UAAYc,GAEX,KAATd,IACAA,GAAQ,KAEI,OAAZe,IACAf,GAAQ,SAAWe","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').\n    /* @ngInject */\n    factory('pageConfigResource', function ($http) {\n    'use strict';\n    function _getQueryString() {\n        var queryString = config.root + 'api/rest/display/config/list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _execute() {\n        return $http.get(_getQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _execute();\n        },\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http) {\n    'use strict';\n    function _doSave(request) {\n        request.query += '/disp=' + request.config;\n        request.path = request.query;\n        // return sugar.postJson(request, 'display', 'ssearch');\n    }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvbmZpZy50cyIsImluZGV4LnJ1bi50cyIsImluZGV4Lm1vZHVsZS50cyIsImZpbHRlcnMvZmlsdGVycy50cyIsInBhZ2UtY29uZmlnL3BhZ2UtY29uZmlnLW1vZHVsZS50cyIsInBhZ2UtY29uZmlnL3BhZ2UtY29uZmlnLXJlc291cmNlLnRzIiwic2F2ZWQtc2VhcmNoL3NhdmVkLXNlYXJjaC1tb2R1bGUudHMiLCJzYXZlZC1zZWFyY2gvc2F2ZWRTZWFyY2gucmVzb3VyY2UudHMiXSwibmFtZXMiOlsidnMiLCJ2cy50b29scyIsInZzLnRvb2xzLkNvbmZpZyIsInZzLnRvb2xzLkNvbmZpZy5jb25zdHJ1Y3RvciIsInZzLnRvb2xzLlJ1bkJsb2NrIiwidnMudG9vbHMuUnVuQmxvY2suY29uc3RydWN0b3IiLCJ2cy50b29scy5maWx0ZXJzIiwidnMudG9vbHMucGFnZUNvbmZpZyIsIl9nZXRRdWVyeVN0cmluZyIsIl9leGVjdXRlIiwidnMudG9vbHMuc2F2ZWRTZWFyY2giLCJfZG9TYXZlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFPLEVBQUUsQ0FZUjtBQVpELFdBQU8sRUFBRTtJQUFDQSxJQUFBQSxLQUFLQSxDQVlkQTtJQVpTQSxXQUFBQSxLQUFLQSxFQUFDQSxDQUFDQTtRQUNmQyxZQUFZQSxDQUFDQTtRQUViQTtZQUNFQyxnQkFBZ0JBO1lBQ2hCQSxnQkFBWUEsWUFBNkJBO2dCQUN2Q0MsYUFBYUE7Z0JBQ2JBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNoQ0EsOEJBQThCQTtZQUNoQ0EsQ0FBQ0E7WUFFSEQsYUFBQ0E7UUFBREEsQ0FSQUQsQUFRQ0MsSUFBQUQ7UUFSWUEsWUFBTUEsU0FRbEJBLENBQUFBO0lBQ0hBLENBQUNBLEVBWlNELEtBQUtBLEdBQUxBLFFBQUtBLEtBQUxBLFFBQUtBLFFBWWRBO0FBQURBLENBQUNBLEVBWk0sRUFBRSxLQUFGLEVBQUUsUUFZUjs7QUNaRCxJQUFPLEVBQUUsQ0FV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Q0FBaUM7UUFDakMsS0FBSztRQUVMLFlBQVksRUFBRSxVQUFTLEVBQUU7WUFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRywyQkFBMkIsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ25FLHVDQUF1QztnQkFDdkMsZUFBZTtnQkFDZixNQUFNO1lBQ1IsQ0FBQyxDQUFDLENBQUM7UUFDVCxDQUFDO1FBRUQsS0FBSyxFQUFFLFVBQVMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPO1lBQ25DLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLEVBQUUsQ0FBQSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixJQUFJLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUMvQixDQUFDO1lBQ0QsRUFBRSxDQUFBLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsSUFBSSxJQUFJLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFFRCxFQUFFLENBQUEsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUM7WUFDN0IsQ0FBQztZQUNELDRFQUE0RTtRQUM5RSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InZzLnRvb2xraXQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIHZzLnRvb2xzIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIC8qKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3RvcigkbG9nUHJvdmlkZXI6IG5nLklMb2dQcm92aWRlcikge1xuICAgICAgLy8gZW5hYmxlIGxvZ1xuICAgICAgJGxvZ1Byb3ZpZGVyLmRlYnVnRW5hYmxlZCh0cnVlKTtcbiAgICAgIC8vIHNldCBvcHRpb25zIHRoaXJkLXBhcnR5IGxpYlxuICAgIH1cblxuICB9XG59XG4iLCJtb2R1bGUgdnMudG9vbHMge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0IGNsYXNzIFJ1bkJsb2NrIHtcbiAgICAvKiogQG5nSW5qZWN0ICovXG4gICAgY29uc3RydWN0b3IoJGxvZzogbmcuSUxvZ1NlcnZpY2UpIHtcbiAgICAgICRsb2cuZGVidWcoJ3J1bkJsb2NrIGVuZCcpO1xuICAgIH1cblxuICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImluZGV4LmNvbmZpZy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiaW5kZXgucnVuLnRzXCIgLz5cblxubW9kdWxlIHZzLnRvb2xzIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scycsIFtdKVxuICAgIC5jb25maWcoQ29uZmlnKVxuICAgIC5ydW4oUnVuQmxvY2spO1xufVxuIiwibW9kdWxlIHZzLnRvb2xzLmZpbHRlcnMge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLmZpbHRlcnMnLCBbXSlcbiAgICAuZmlsdGVyKCdyZXBsYWNlU3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oaGF5U3RhY2s6IHN0cmluZywgb2xkTmVlZGxlOiBzdHJpbmcsIG5ld05lZWRsZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBoYXlTdGFjay5yZXBsYWNlKG9sZE5lZWRsZSwgbmV3TmVlZGxlKTtcbiAgICAgIH07XG4gICAgfSk7XG4gfVxuIiwibW9kdWxlIHZzLnRvb2xzLnBhZ2VDb25maWcge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnBhZ2VDb25maWcnLCBbXSk7XG59XG4iLCIvKmdsb2JhbCBhbmd1bGFyLCAkLCBxdWVyeXN0cmluZywgY29uZmlnICovXG5kZWNsYXJlIHZhciBjb25maWc7XG5cbmFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5wYWdlQ29uZmlnJykuXG5cdC8qIEBuZ0luamVjdCAqL1xuICBmYWN0b3J5KCdwYWdlQ29uZmlnUmVzb3VyY2UnLCBmdW5jdGlvbiAoJGh0dHA6IGFueSkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gX2dldFF1ZXJ5U3RyaW5nKCkge1xuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvZGlzcGxheS9jb25maWcvbGlzdCc7XG4gICAgICBxdWVyeVN0cmluZyArPSAnP3JhbmQ9JyArIE1hdGgucmFuZG9tKCk7XG4gICAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2V4ZWN1dGUoKSB7XG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KF9nZXRRdWVyeVN0cmluZygpKS50aGVuKGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAvLyBAVE9ETzogaGFuZGxlIGVycm9yXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFBhZ2VDb25maWdzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9leGVjdXRlKCk7XG4gICAgICB9LFxuICAgIH07XG4gIH0pO1xuIiwibW9kdWxlIHZzLnRvb2xzLnNhdmVkU2VhcmNoIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5zYXZlZFNlYXJjaCcsIFtdKTtcbn1cbiIsIi8qZ2xvYmFsIGFuZ3VsYXIsICQsIHF1ZXJ5c3RyaW5nLCBjb25maWcgKi9cbmRlY2xhcmUgdmFyIGNvbmZpZztcblxuYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnNhdmVkU2VhcmNoJykuXG5cdC8qIEBuZ0luamVjdCAqL1xuICBmYWN0b3J5KCdzYXZlZFNlYXJjaFJlc291cmNlJywgZnVuY3Rpb24gKCRodHRwKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBfZG9TYXZlKHJlcXVlc3QpIHtcbiAgICAgIHJlcXVlc3QucXVlcnkgKz0gJy9kaXNwPScgKyByZXF1ZXN0LmNvbmZpZztcbiAgICAgIHJlcXVlc3QucGF0aCA9IHJlcXVlc3QucXVlcnk7XG4gICAgICAvLyByZXR1cm4gc3VnYXIucG9zdEpzb24ocmVxdWVzdCwgJ2Rpc3BsYXknLCAnc3NlYXJjaCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9nZXRRdWVyeVN0cmluZygpIHtcbiAgICAgIHZhciByb3dzID0gMTUwOyAgLy8gQFRPRE8gc2V0IHRvIHdoYXQgd2UgcmVhbGx5IHdhbnRcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IGNvbmZpZy5yb290ICsgJ3NvbHIvc3NlYXJjaC9zZWxlY3Q/JztcbiAgICAgIHF1ZXJ5U3RyaW5nICs9ICdyb3dzPScgKyByb3dzICsgJyZyYW5kPScgKyBNYXRoLnJhbmRvbSgpO1xuICAgICAgcXVlcnlTdHJpbmcgKz0gJyZmbD1pZCx0aXRsZSxkZXNjcmlwdGlvbixvd25lcixwYXRoLHNoYXJlLHF1ZXJ5LGNvbmZpZyxvcmRlcixzYXZlZCxwcml2YXRlLHZpZXcsX3ZlcnNpb25fLGNvbmZpZ190aXRsZTpbY29uZmlnVGl0bGVdJztcbiAgICAgIHF1ZXJ5U3RyaW5nICs9ICcmd3Q9anNvbiZqc29uLndyZj1KU09OX0NBTExCQUNLJztcbiAgICAgIHJldHVybiBxdWVyeVN0cmluZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZXhlY3V0ZSgpIHtcbiAgICAgIHJldHVybiAkaHR0cC5qc29ucChfZ2V0UXVlcnlTdHJpbmcoKSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS5kYXRhLnJlc3BvbnNlLmRvY3M7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAvLyBAVE9ETzogaGFuZGxlIGVycm9yXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFNhdmVkU2VhcmNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2V4ZWN1dGUoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIHNhdmVTZWFyY2g6IGZ1bmN0aW9uKHNhdmVkU2VhcmNoLCBwYXJhbXMpIHtcbiAgICAgIC8vICAgc2F2ZWRTZWFyY2guY29uZmlnID0gY29uZmlnU2VydmljZS5nZXRDb25maWdJZCgpO1xuICAgICAgLy8gICBzYXZlZFNlYXJjaC5xdWVyeSA9IGNvbnZlcnRlci50b0NsYXNzaWNQYXJhbXMocGFyYW1zKTtcbiAgICAgIC8vICAgcmV0dXJuIF9kb1NhdmUoc2F2ZWRTZWFyY2gpO1xuICAgICAgLy8gfSxcblxuICAgICAgZGVsZXRlU2VhcmNoOiBmdW5jdGlvbihpZCl7XG4gICAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvZGlzcGxheS9zc2VhcmNoLycgKyBpZCkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAvLyBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgLy8gICBlbnRyeShpZCk7XG4gICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBvcmRlcjogZnVuY3Rpb24oaWQsIGJlZm9yZUlkLCBhZnRlcklkKSB7XG4gICAgICAgIHZhciBkYXRhID0gJyc7XG4gICAgICAgIGlmKGJlZm9yZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSArPSAnYmVmb3JlPScgKyBiZWZvcmVJZDtcbiAgICAgICAgfVxuICAgICAgICBpZihkYXRhICE9PSAnJykge1xuICAgICAgICAgIGRhdGEgKz0gJyYnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoYWZ0ZXJJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGEgKz0gJ2FmdGVyPScgKyBhZnRlcklkO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBzdWdhci5wb3N0Rm9ybSgnYXBpL3Jlc3QvZGlzcGxheS9zc2VhcmNoLycgKyBpZCArICcvb3JkZXInLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==\n","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            Config.$inject = [\"$logProvider\"];\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            RunBlock.$inject = [\"$log\"];\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').\n    /* @ngInject */\n    factory('pageConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    function _getQueryString() {\n        var queryString = config.root + 'api/rest/display/config/list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _execute() {\n        return $http.get(_getQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _execute();\n        },\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", function ($http) {\n    'use strict';\n    function _doSave(request) {\n        request.query += '/disp=' + request.config;\n        request.path = request.query;\n        // return sugar.postJson(request, 'display', 'ssearch');\n    }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n}]);\n\n//# sourceMappingURL=data:application/json;base64,\n"],"sourceRoot":"/source/"}