{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","catalog","factory","$http","$q","_fetch","get","uri","then","res","data","servers","error","console","log","_loadRemoteLocations","params","catalogs","promises","forEach","isDefined","url","locations","catalogPromise","withCredentials","response","push","all","root","fetch","loadRemoteLocations","displayConfig","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getDisplayConfigList","_getDisplayConfig","_deleteDisplayConfig","_saveDisplayConfig","template","post","getDisplayConfigs","getDisplayConfig","deleteDisplayConfig","saveDisplayConfig","filters","filter","hayStack","oldNeedle","newNeedle","replace","RegExp","util","Sugar","this","isString","val","String","getInstance","prototype","toMap","key","array","map","value","toStringMap","pluck","name","fn","fl","isUndefined","postForm","service","method","headers","Content-Type","parseQueryString","s","pairs","slice","split","result","pair","decodeURIComponent","JSON","parse","stringify","postJson","request","api","action","fields","fields_1","FieldsResource","sugar","_this","getFieldsParams","ensureTagsFieldExist","docs","found","i","length","category","disp_en","displayable","filterable","sortable","stype","tableable","fetchHydrationStats","query","field","indexOf","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","getCount","hydration","refName","savedSearch","_doSave","_getQueryString","rows","_execute","jsonp","getSavedSearches","saveSearch","deleteSearch","wipe","restore","order","beforeId","afterId","fetchLabels","Date","getTime","resp","labels","translate","Translator","removePrefixHash","removePrefixList","item","c","substring","load","resourceUrl","when","translateField","idx","prefix","translated","FIELD","classify","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            Config.$inject = [\"$logProvider\"];\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            RunBlock.$inject = [\"$log\"];\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', [\"$http\", \"$q\", function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                FieldsResource.$inject = [\"sugar\"];\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select?rand=' + Math.random(), _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", \"sugar\", function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                Translator.$inject = [\"config\", \"$http\", \"$q\"];\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', [\"config\", \"$http\", \"$q\", function (config, $http, $q) { return new translate.Translator(config, $http, $q); }])\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', [\"config\", \"$http\", function (config, $http) { return util.Sugar.getInstance(config, $http); }]);\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}