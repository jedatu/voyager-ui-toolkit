{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","catalog","factory","$http","$q","_fetch","get","uri","then","res","data","servers","error","console","log","_loadRemoteLocations","params","catalogs","promises","forEach","isDefined","url","locations","catalogPromise","withCredentials","response","push","all","root","fetch","loadRemoteLocations","util","Sugar","this","isString","val","String","getInstance","prototype","toMap","key","array","map","value","toStringMap","pluck","name","fn","fl","isUndefined","postForm","service","method","headers","Content-Type","parseQueryString","queryString","s","pairs","slice","split","result","pair","decodeURIComponent","JSON","parse","stringify","postJson","request","api","action","fields","fields_1","FieldsResource","sugar","_this","getFieldsParams","docs","fetchHydrationStats","query","field","indexOf","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","i","length","id","getCount","hydration","refName","displayConfig","_getListQueryString","configUri","Math","random","_getConfigQueryString","_getDisplayConfigList","_getDisplayConfig","_deleteDisplayConfig","_saveDisplayConfig","template","post","getDisplayConfigs","getDisplayConfig","deleteDisplayConfig","saveDisplayConfig","filters","filter","hayStack","oldNeedle","newNeedle","replace","RegExp","savedSearch","_doSave","_getQueryString","rows","_execute","jsonp","getSavedSearches","saveSearch","deleteSearch","wipe","restore","order","beforeId","afterId","fetchLabels","Date","getTime","resp","labels","translate","Translator","load","resourceUrl","when","translateField","translated","FIELD","classify","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            Config.$inject = [\"$logProvider\"];\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            RunBlock.$inject = [\"$log\"];\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', [\"$http\", \"$q\", function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                FieldsResource.$inject = [\"sugar\"];\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", \"sugar\", function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n}]);\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', [\"config\", \"$http\", function (config, $http) { return util.Sugar.getInstance(config, $http); }]);\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                Translator.$inject = [\"config\", \"$http\", \"$q\"];\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', [\"config\", \"$http\", \"$q\", function (config, $http, $q) { return new translate.Translator(config, $http, $q); }])\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}