{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","util","Sugar","$http","this","isString","val","String","getInstance","prototype","toMap","key","array","map","forEach","value","toStringMap","pluck","name","fl","docs","push","postForm","url","data","service","root","method","withCredentials","headers","Content-Type","fields","_fields","FieldsResource","sugar","_this","fetch","split","getFieldsParams","then","res","response","fetchHydrationStats","query","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","params","q","rows","sort","wt","facets","facet.field","facet.limit","facet.mincount","statsField","count","i","length","getCount","hydration","field","refName","filters","filter","hayStack","oldNeedle","newNeedle","replace","pageConfig","factory","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getPageConfigList","get","error","console","log","_getPageConfig","_deletePageConfig","_savePageConfig","template","post","getPageConfigs","getPageConfig","deletePageConfig","savePageConfig","savedSearch","_getQueryString","_execute","jsonp","getSavedSearches","deleteSearch","order","beforeId","afterId","translate","Translator","$q","load","resourceUrl","when","translateField","translated","FIELD","isDefined","classify","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (value.docs) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                return Sugar;\n            })();\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        fl = fl.split(',');\n                        return _this.sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = _this.sugar.pluck(fields, 'name');\n                            // http://voyagerdemo.com/daily/solr/v0/select?&rows=0&wt=json&facet=true&facet.field=format\n                            return _this.sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return {\n                        params: {\n                            q: '*:*',\n                            fl: fl,\n                            rows: 10000,\n                            sort: 'name%20asc',\n                            wt: 'json'\n                        }\n                    };\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return {\n                        params: {\n                            facets: true,\n                            'facet.field': fl,\n                            'facet.limit': 10000,\n                            'facet.mincount': 100,\n                            rows: 0,\n                            wt: 'json'\n                        }\n                    };\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            // fields[i].id = statsField;  TODO  why?\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            })();\n            _fields.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', []).service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); }).constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', []).factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvbmZpZy50cyIsImluZGV4LnJ1bi50cyIsImluZGV4Lm1vZHVsZS50cyIsInV0aWwvc3VnYXIudHMiLCJmaWVsZHMvZmllbGRzLnJlc291cmNlLnRzIiwiZmllbGRzL2ZpZWxkcy5tb2R1bGUudHMiLCJmaWx0ZXJzL2ZpbHRlcnMudHMiLCJwYWdlLWNvbmZpZy9wYWdlLWNvbmZpZy1tb2R1bGUudHMiLCJwYWdlLWNvbmZpZy9wYWdlLWNvbmZpZy1yZXNvdXJjZS50cyIsInNhdmVkLXNlYXJjaC9zYXZlZC1zZWFyY2gtbW9kdWxlLnRzIiwic2F2ZWQtc2VhcmNoL3NhdmVkU2VhcmNoLnJlc291cmNlLnRzIiwidHJhbnNsYXRlL3RyYW5zbGF0b3IudHMiLCJ0cmFuc2xhdGUvdHJhbnNsYXRlLm1vZHVsZS50cyIsInV0aWwvdXRpbC5tb2R1bGUudHMiXSwibmFtZXMiOlsidnMiLCJ2cy50b29scyIsInZzLnRvb2xzLkNvbmZpZyIsInZzLnRvb2xzLkNvbmZpZy5jb25zdHJ1Y3RvciIsInZzLnRvb2xzLlJ1bkJsb2NrIiwidnMudG9vbHMuUnVuQmxvY2suY29uc3RydWN0b3IiLCJ2cy50b29scy51dGlsIiwidnMudG9vbHMudXRpbC5TdWdhciIsInZzLnRvb2xzLnV0aWwuU3VnYXIuY29uc3RydWN0b3IiLCJ2cy50b29scy51dGlsLlN1Z2FyLmlzU3RyaW5nIiwidnMudG9vbHMudXRpbC5TdWdhci5nZXRJbnN0YW5jZSIsInZzLnRvb2xzLnV0aWwuU3VnYXIudG9NYXAiLCJ2cy50b29scy51dGlsLlN1Z2FyLnRvU3RyaW5nTWFwIiwidnMudG9vbHMudXRpbC5TdWdhci5wbHVjayIsInZzLnRvb2xzLnV0aWwuU3VnYXIucG9zdEZvcm0iLCJ2cy50b29scy5maWVsZHMiLCJ2cy50b29scy5maWVsZHMuRmllbGRzUmVzb3VyY2UiLCJ2cy50b29scy5maWVsZHMuRmllbGRzUmVzb3VyY2UuY29uc3RydWN0b3IiLCJ2cy50b29scy5maWVsZHMuRmllbGRzUmVzb3VyY2UuZ2V0RmllbGRzUGFyYW1zIiwidnMudG9vbHMuZmllbGRzLkZpZWxkc1Jlc291cmNlLmdldFN0YXRzUGFyYW1zIiwidnMudG9vbHMuZmllbGRzLkZpZWxkc1Jlc291cmNlLmFwcGx5SHlkcmF0aW9uIiwidnMudG9vbHMuZmllbGRzLkZpZWxkc1Jlc291cmNlLmdldENvdW50IiwidnMudG9vbHMuZmlsdGVycyIsInZzLnRvb2xzLnBhZ2VDb25maWciLCJfZ2V0TGlzdFF1ZXJ5U3RyaW5nIiwiX2dldENvbmZpZ1F1ZXJ5U3RyaW5nIiwiX2dldFBhZ2VDb25maWdMaXN0IiwiX2dldFBhZ2VDb25maWciLCJfZGVsZXRlUGFnZUNvbmZpZyIsIl9zYXZlUGFnZUNvbmZpZyIsInZzLnRvb2xzLnNhdmVkU2VhcmNoIiwiX2dldFF1ZXJ5U3RyaW5nIiwiX2V4ZWN1dGUiLCJ2cy50b29scy50cmFuc2xhdGUiLCJ2cy50b29scy50cmFuc2xhdGUuVHJhbnNsYXRvciIsInZzLnRvb2xzLnRyYW5zbGF0ZS5UcmFuc2xhdG9yLmNvbnN0cnVjdG9yIiwidnMudG9vbHMudHJhbnNsYXRlLlRyYW5zbGF0b3IubG9hZCIsInZzLnRvb2xzLnRyYW5zbGF0ZS5UcmFuc2xhdG9yLnRyYW5zbGF0ZUZpZWxkIiwidnMudG9vbHMudHJhbnNsYXRlLlRyYW5zbGF0b3IuY2xhc3NpZnkiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sRUFBRSxDQVlSO0FBWkQsV0FBTyxFQUFFO0lBQUNBLElBQUFBLEtBQUtBLENBWWRBO0lBWlNBLFdBQUFBLEtBQUtBLEVBQUNBLENBQUNBO1FBQ2ZDLFlBQVlBLENBQUNBO1FBRWJBLElBQWFBLE1BQU1BO1lBQ2pCQyxnQkFBZ0JBO1lBQ2hCQSxTQUZXQSxNQUFNQSxDQUVMQSxZQUE2QkE7Z0JBQ3ZDQyxBQUNBQSxhQURhQTtnQkFDYkEsWUFBWUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSw4QkFBOEJBO1lBQ2hDQSxDQUFDQTtZQUVIRCxhQUFDQTtRQUFE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U0EsR0FBVEEsZUFBU0EsS0FBVEEsZUFBU0EsUUFTeEJBO0lBQURBLENBQUNBLEVBVFNELEtBQUtBLEdBQUxBLFFBQUtBLEtBQUxBLFFBQUtBLFFBU2RBO0FBQURBLENBQUNBLEVBVE0sRUFBRSxLQUFGLEVBQUUsUUFTUjs7QUNWRCxBQUNBLGlDQURpQztBQUNqQyxJQUFPLEVBQUUsQ0FNUjtBQU5ELFdBQU8sRUFBRTtJQUFDQSxJQUFBQSxLQUFLQSxDQU1kQTtJQU5TQSxXQUFBQSxLQUFLQTtRQUFDQyxJQUFBQSxJQUFJQSxDQU1uQkE7UUFOZUEsV0FBQUEsSUFBSUEsRUFBQ0EsQ0FBQ0E7WUFDcEJLLFlBQVlBLENBQUNBO1lBRWJBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLGVBQWVBLEVBQUVBLEVBQUVBLENBQUNBLENBRWhDQSxPQUFPQSxDQUFDQSxPQUFPQSxFQUFFQSxVQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxJQUFLQSxPQUFBQSxVQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFLQSxDQUFDQSxFQUFoQ0EsQ0FBZ0NBLENBQUNBLENBQUNBO1FBQzNFQSxDQUFDQSxFQU5lTCxJQUFJQSxHQUFKQSxVQUFJQSxLQUFKQSxVQUFJQSxRQU1uQkE7SUFBREEsQ0FBQ0EsRUFOU0QsS0FBS0EsR0FBTEEsUUFBS0EsS0FBTEEsUUFBS0EsUUFNZEE7QUFBREEsQ0FBQ0EsRUFOTSxFQUFFLEtBQUYsRUFBRSxRQU1SIiwiZmlsZSI6InZzLnRvb2xraXQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIHZzLnRvb2xzIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIC8qKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3RvcigkbG9nUHJvdmlkZXI6IG5nLklMb2dQcm92aWRlcikge1xuICAgICAgLy8gZW5hYmxlIGxvZ1xuICAgICAgJGxvZ1Byb3ZpZGVyLmRlYnVnRW5hYmxlZCh0cnVlKTtcbiAgICAgIC8vIHNldCBvcHRpb25zIHRoaXJkLXBhcnR5IGxpYlxuICAgIH1cblxuICB9XG59XG4iLCJtb2R1bGUgdnMudG9vbHMge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0IGNsYXNzIFJ1bkJsb2NrIHtcbiAgICAvKiogQG5nSW5qZWN0ICovXG4gICAgY29uc3RydWN0b3IoJGxvZzogbmcuSUxvZ1NlcnZpY2UpIHtcbiAgICAgICRsb2cuZGVidWcoJ3J1bkJsb2NrIGVuZCcpO1xuICAgIH1cblxuICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImluZGV4LmNvbmZpZy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiaW5kZXgucnVuLnRzXCIgLz5cblxubW9kdWxlIHZzLnRvb2xzIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGRlY2xhcmUgdmFyIGNvbmZpZztcblxuICBhbmd1bGFyLm1vZHVsZSgndnMudG9vbHMnLCBbXSlcbiAgICAuY29uZmlnKENvbmZpZylcbiAgICAucnVuKFJ1bkJsb2NrKVxuICAgIC5jb25zdGFudCgnY29uZmlnJywgY29uZmlnKTtcbn1cbiIsIm1vZHVsZSB2cy50b29scy51dGlsIHtcblxuXHRleHBvcnQgY2xhc3MgU3VnYXIge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IGFueSwgcHJpdmF0ZSAkaHR0cDogbmcuSUh0dHBTZXJ2aWNlKSB7fVxuXG5cdFx0cHVibGljIHN0YXRpYyBpc1N0cmluZyh2YWw6IGFueSkge1xuXHRcdFx0cmV0dXJuICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB2YWwgaW5zdGFuY2VvZiBTdHJpbmcpO1xuXHRcdH1cblxuXHRcdHN0YXRpYyBnZXRJbnN0YW5jZShjb25maWc6IGFueSwgJGh0dHA6IG5nLklIdHRwU2VydmljZSkgOiBTdWdhciB7XG5cdFx0XHRyZXR1cm4gbmV3IFN1Z2FyKGNvbmZpZywgJGh0dHApO1xuXHRcdH1cblxuXHRcdHRvTWFwKGtleTogYW55LCBhcnJheTogYW55KSB7XG5cdFx0XHR2YXIgbWFwID0ge307XG5cdFx0XHRhcnJheS5mb3JFYWNoKCh2YWx1ZTogYW55KSA9PiB7XG5cdFx0XHRcdG1hcFt2YWx1ZVtrZXldXSA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbWFwO1xuXHRcdH1cblxuXHRcdHRvU3RyaW5nTWFwKGFycmF5OiBhbnkpIHtcblx0XHRcdHZhciBtYXAgPSB7fTtcblx0XHRcdGFycmF5LmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcblx0XHRcdFx0bWFwW3ZhbHVlXSA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbWFwO1xuXHRcdH1cblxuICAgIHBsdWNrKGFycmF5OiBhbnksIG5hbWU6IHN0cmluZykge1xuICAgICAgdmFyIGZsID0gW107XG4gICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlOiBhbnkpe1xuICAgICAgICBpZiAodmFsdWUuZG9jcykge1xuICAgICAgICAgIGZsLnB1c2godmFsdWVbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmbDtcbiAgICB9XG5cbiAgICBwb3N0Rm9ybSh1cmw6IHN0cmluZywgZGF0YTogYW55KSB7XG4gICAgICB2YXIgc2VydmljZSA9IHRoaXMuY29uZmlnLnJvb3QgKyB1cmw7XG4gICAgICByZXR1cm4gdGhpcy4kaHR0cCh7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB1cmw6IHNlcnZpY2UsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9XG4gICAgICB9KTtcbiAgICB9XG5cdH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8udG1wL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWwvc3VnYXIudHNcIiAvPlxuXG5tb2R1bGUgdnMudG9vbHMuZmllbGRzIHtcbid1c2Ugc3RyaWN0JztcblxuXHRleHBvcnQgaW50ZXJmYWNlIElGaWVsZHNSZXNvdXJjZSB7XG5cdFx0ZmV0Y2goZmllbGRzPzogc3RyaW5nKTogbmcuSVByb21pc2U8YW55Pjtcblx0XHRmZXRjaEh5ZHJhdGlvblN0YXRzKHF1ZXJ5OiBzdHJpbmcpOiBuZy5JUHJvbWlzZTxhbnk+O1xuXHR9XG5cblx0ZXhwb3J0IGNsYXNzIEZpZWxkc1Jlc291cmNlIGltcGxlbWVudHMgSUZpZWxkc1Jlc291cmNlIHtcblx0XHRzdGF0aWMgcmVmTmFtZSA9ICdmaWVsZHNSZXNvdXJjZSc7XG5cblx0XHRmZXRjaDogKHByb3BlcnRpZXM/OiBzdHJpbmcpID0+IGFueTtcblx0XHRmZXRjaEh5ZHJhdGlvblN0YXRzOiAocXVlcnk6IHN0cmluZykgPT4gYW55O1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0Y29uc3RydWN0b3IocHJpdmF0ZSBzdWdhcjogYW55KSB7XG5cblx0XHRcdHRoaXMuZmV0Y2ggPSAoZmllbGRzPzogYW55KSA9PiB7XG5cdFx0XHRcdHZhciBmbCA9IChmaWVsZHMgfHwgJ25hbWUsY2F0ZWdvcnksZG9jcyxkaXNwX2VuJyk7XG4gICAgICAgIGZsID0gZmwuc3BsaXQoJywnKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3VnYXIucG9zdEZvcm0oJ3NvbHIvZmllbGRzL3NlbGVjdCcsIHRoaXMuZ2V0RmllbGRzUGFyYW1zKGZsKSkudGhlbigocmVzOiBhbnkpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiByZXMuZGF0YS5yZXNwb25zZS5kb2NzO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5mZXRjaEh5ZHJhdGlvblN0YXRzID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5mZXRjaCgpLnRoZW4oKGZpZWxkczogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICAgIHZhciBmbCA9IHRoaXMuc3VnYXIucGx1Y2soZmllbGRzLCAnbmFtZScpO1xuXG4gICAgICAgICAgLy8gaHR0cDovL3ZveWFnZXJkZW1vLmNvbS9kYWlseS9zb2xyL3YwL3NlbGVjdD8mcm93cz0wJnd0PWpzb24mZmFjZXQ9dHJ1ZSZmYWNldC5maWVsZD1mb3JtYXRcblxuICAgICAgICAgIHJldHVybiB0aGlzLnN1Z2FyLnBvc3RGb3JtKCdzb2xyL3YwL3NlbGVjdD8nICsgcXVlcnksIHRoaXMuZ2V0U3RhdHNQYXJhbXMoZmwpKS50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgdmFyIHN0YXRzRmllbGRzID0gcmVzLmRhdGEuZmFjZXRfY291bnRzLmZhY2V0X2ZpZWxkcztcbiAgICAgICAgICAgIHZhciB0b3RhbCA9IHJlcy5kYXRhLnJlc3BvbnNlLm51bUZvdW5kO1xuICAgICAgICAgICAgdGhpcy5hcHBseUh5ZHJhdGlvbihzdGF0c0ZpZWxkcywgZmllbGRzLCB0b3RhbCk7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuXHRcdFx0fTtcblxuXHRcdH1cblxuICAgIHByaXZhdGUgZ2V0RmllbGRzUGFyYW1zKGZsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBxOiAnKjoqJyxcbiAgICAgICAgICBmbDogZmwsXG4gICAgICAgICAgcm93czogMTAwMDAsXG4gICAgICAgICAgc29ydDogJ25hbWUlMjBhc2MnLFxuICAgICAgICAgIHd0OiAnanNvbidcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgZ2V0U3RhdHNQYXJhbXMoZmwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIGZhY2V0czogdHJ1ZSxcbiAgICAgICAgICAnZmFjZXQuZmllbGQnOiBmbCxcbiAgICAgICAgICAnZmFjZXQubGltaXQnOiAxMDAwMCxcbiAgICAgICAgICAnZmFjZXQubWluY291bnQnOiAxMDAsICAvLyBAVE9ETyBhZGp1c3QgdGhpcyB0byBhIHJlYXNvbmFibGUgbWluaW11bVxuICAgICAgICAgIHJvd3M6IDAsXG4gICAgICAgICAgd3Q6ICdqc29uJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlIeWRyYXRpb24oc3RhdHNGaWVsZHMsIGZpZWxkcywgdG90YWwpIHtcbiAgICAgIHZhciBzdGF0c0ZpZWxkLCBjb3VudDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0YXRzRmllbGQgPSBzdGF0c0ZpZWxkc1tmaWVsZHNbaV0ubmFtZV07XG4gICAgICAgIGlmIChzdGF0c0ZpZWxkICYmIHN0YXRzRmllbGQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGZpZWxkc1tpXS5pZCA9IHN0YXRzRmllbGQ7ICBUT0RPICB3aHk/XG4gICAgICAgICAgY291bnQgPSB0aGlzLmdldENvdW50KHN0YXRzRmllbGQpO1xuICAgICAgICAgIGZpZWxkc1tpXS5oeWRyYXRpb24gPSBjb3VudCAvIHRvdGFsICogMTAwO1xuICAgICAgICAgIC8vIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENvdW50KGZpZWxkKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBmaWVsZDsgaSArPSAyKSB7XG4gICAgICAgIGNvdW50ICs9IGZpZWxkW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2ZpZWxkcy5yZXNvdXJjZS50c1wiIC8+XG5cbm1vZHVsZSB2cy50b29scy5maWVsZHMge1xuJ3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5maWVsZHMnLCBbXSlcblx0XHQuc2VydmljZShGaWVsZHNSZXNvdXJjZS5yZWZOYW1lLCBGaWVsZHNSZXNvdXJjZSk7XG5cbn1cbiIsIm1vZHVsZSB2cy50b29scy5maWx0ZXJzIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5maWx0ZXJzJywgW10pXHJcbiAgICAuZmlsdGVyKCdyZXBsYWNlU3RyaW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihoYXlTdGFjazogc3RyaW5nLCBvbGROZWVkbGU6IHN0cmluZywgbmV3TmVlZGxlOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gaGF5U3RhY2sucmVwbGFjZShvbGROZWVkbGUsIG5ld05lZWRsZSk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuIH1cclxuIiwibW9kdWxlIHZzLnRvb2xzLnBhZ2VDb25maWcge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnBhZ2VDb25maWcnLCBbXSk7XHJcbn1cclxuIiwiLypnbG9iYWwgYW5ndWxhciwgJCwgcXVlcnlzdHJpbmcsIGNvbmZpZyAqL1xyXG5kZWNsYXJlIHZhciBjb25maWc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndnMudG9vbHMucGFnZUNvbmZpZycpLlxyXG5cdC8qIEBuZ0luamVjdCAqL1xyXG5cdGZhY3RvcnkoJ3BhZ2VDb25maWdSZXNvdXJjZScsIGZ1bmN0aW9uICgkaHR0cDogYW55KSB7XHJcblxyXG5cdFx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRcdHZhciBjb25maWdVcmkgPSBjb25maWcucm9vdCArICdhcGkvcmVzdC9kaXNwbGF5L2NvbmZpZy8nO1xyXG5cclxuXHRcdGZ1bmN0aW9uIF9nZXRMaXN0UXVlcnlTdHJpbmcoKSB7XHJcblx0XHRcdHZhciBxdWVyeVN0cmluZyA9IGNvbmZpZ1VyaSArICdsaXN0JztcclxuXHRcdFx0cXVlcnlTdHJpbmcgKz0gJz9yYW5kPScgKyBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0XHRyZXR1cm4gcXVlcnlTdHJpbmc7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gX2dldENvbmZpZ1F1ZXJ5U3RyaW5nKGlkOiBzdHJpbmcpIHtcclxuXHRcdFx0dmFyIHF1ZXJ5U3RyaW5nID0gY29uZmlnVXJpICsgaWQ7XHJcblx0XHRcdHF1ZXJ5U3RyaW5nICs9ICc/cmFuZD0nICsgTWF0aC5yYW5kb20oKTtcclxuXHRcdFx0cmV0dXJuIHF1ZXJ5U3RyaW5nO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIF9nZXRQYWdlQ29uZmlnTGlzdCgpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldChfZ2V0TGlzdFF1ZXJ5U3RyaW5nKCkpLnRoZW4oZnVuY3Rpb24gKGRhdGE6IGFueSkge1xyXG5cdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcjogYW55KSB7XHJcblx0XHRcdFx0Ly8gQFRPRE86IGhhbmRsZSBlcnJvclxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0XHRyZXR1cm4gZXJyb3I7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIF9nZXRQYWdlQ29uZmlnKGlkOiBzdHJpbmcpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmdldChfZ2V0Q29uZmlnUXVlcnlTdHJpbmcoaWQpKS50aGVuKGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xyXG5cdFx0XHRcdC8vIEBUT0RPOiBoYW5kbGUgZXJyb3JcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdFx0cmV0dXJuIGVycm9yO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBfZGVsZXRlUGFnZUNvbmZpZyhpZDogc3RyaW5nKSB7XHJcblx0XHRcdHJldHVybiAkaHR0cC5kZWxldGUoX2dldENvbmZpZ1F1ZXJ5U3RyaW5nKGlkKSkudGhlbihmdW5jdGlvbiAoZGF0YTogYW55KSB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yOiBhbnkpIHtcclxuXHRcdFx0XHQvLyBAVE9ETzogaGFuZGxlIGVycm9yXHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHRcdHJldHVybiBlcnJvcjtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gX3NhdmVQYWdlQ29uZmlnKHRlbXBsYXRlOiBhbnkpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoY29uZmlnVXJpLCB0ZW1wbGF0ZSkudGhlbihmdW5jdGlvbiAoZGF0YTogYW55KSB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yOiBhbnkpIHtcclxuXHRcdFx0XHQvLyBAVE9ETzogaGFuZGxlIGVycm9yXHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHRcdHJldHVybiBlcnJvcjtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Z2V0UGFnZUNvbmZpZ3M6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBfZ2V0UGFnZUNvbmZpZ0xpc3QoKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Z2V0UGFnZUNvbmZpZzogZnVuY3Rpb24oaWQ6IHN0cmluZykge1xyXG5cdFx0XHRcdHJldHVybiBfZ2V0UGFnZUNvbmZpZyhpZCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlbGV0ZVBhZ2VDb25maWc6IGZ1bmN0aW9uKGlkOiBzdHJpbmcpIHtcclxuXHRcdFx0XHRyZXR1cm4gX2RlbGV0ZVBhZ2VDb25maWcoaWQpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzYXZlUGFnZUNvbmZpZzogZnVuY3Rpb24odGVtcGxhdGU6IGFueSl7XHJcblx0XHRcdFx0cmV0dXJuIF9zYXZlUGFnZUNvbmZpZyh0ZW1wbGF0ZSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSk7XHJcbiIsIm1vZHVsZSB2cy50b29scy5zYXZlZFNlYXJjaCB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgndnMudG9vbHMuc2F2ZWRTZWFyY2gnLCBbXSk7XG59XG4iLCIvKmdsb2JhbCBhbmd1bGFyLCAkLCBxdWVyeXN0cmluZywgY29uZmlnICovXG5kZWNsYXJlIHZhciBjb25maWc7XG5cbmFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5zYXZlZFNlYXJjaCcpLlxuXHQvKiBAbmdJbmplY3QgKi9cbiAgZmFjdG9yeSgnc2F2ZWRTZWFyY2hSZXNvdXJjZScsIGZ1bmN0aW9uICgkaHR0cDogYW55KSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBmdW5jdGlvbiBfZG9TYXZlKHJlcXVlc3Q6IGFueSkge1xuICAgIC8vICAgcmVxdWVzdC5xdWVyeSArPSAnL2Rpc3A9JyArIHJlcXVlc3QuY29uZmlnO1xuICAgIC8vICAgcmVxdWVzdC5wYXRoID0gcmVxdWVzdC5xdWVyeTtcbiAgICAvLyAgIC8vIHJldHVybiBzdWdhci5wb3N0SnNvbihyZXF1ZXN0LCAnZGlzcGxheScsICdzc2VhcmNoJyk7XG4gICAgLy8gfVxuXG4gICAgZnVuY3Rpb24gX2dldFF1ZXJ5U3RyaW5nKCkge1xuICAgICAgdmFyIHJvd3MgPSAxNTA7ICAvLyBAVE9ETyBzZXQgdG8gd2hhdCB3ZSByZWFsbHkgd2FudFxuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gY29uZmlnLnJvb3QgKyAnc29sci9zc2VhcmNoL3NlbGVjdD8nO1xuICAgICAgcXVlcnlTdHJpbmcgKz0gJ3Jvd3M9JyArIHJvd3MgKyAnJnJhbmQ9JyArIE1hdGgucmFuZG9tKCk7XG4gICAgICBxdWVyeVN0cmluZyArPSAnJmZsPWlkLHRpdGxlLGRlc2NyaXB0aW9uLG93bmVyLHBhdGgsc2hhcmUscXVlcnksY29uZmlnLG9yZGVyLHNhdmVkLHByaXZhdGUsdmlldyxfdmVyc2lvbl8sY29uZmlnX3RpdGxlOltjb25maWdUaXRsZV0nO1xuICAgICAgcXVlcnlTdHJpbmcgKz0gJyZ3dD1qc29uJmpzb24ud3JmPUpTT05fQ0FMTEJBQ0snO1xuICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9leGVjdXRlKCkge1xuICAgICAgcmV0dXJuICRodHRwLmpzb25wKF9nZXRRdWVyeVN0cmluZygpKS50aGVuKGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuZGF0YS5yZXNwb25zZS5kb2NzO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xuICAgICAgICAvLyBAVE9ETzogaGFuZGxlIGVycm9yXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFNhdmVkU2VhcmNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2V4ZWN1dGUoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIHNhdmVTZWFyY2g6IGZ1bmN0aW9uKHNhdmVkU2VhcmNoLCBwYXJhbXMpIHtcbiAgICAgIC8vICAgc2F2ZWRTZWFyY2guY29uZmlnID0gY29uZmlnU2VydmljZS5nZXRDb25maWdJZCgpO1xuICAgICAgLy8gICBzYXZlZFNlYXJjaC5xdWVyeSA9IGNvbnZlcnRlci50b0NsYXNzaWNQYXJhbXMocGFyYW1zKTtcbiAgICAgIC8vICAgcmV0dXJuIF9kb1NhdmUoc2F2ZWRTZWFyY2gpO1xuICAgICAgLy8gfSxcblxuICAgICAgZGVsZXRlU2VhcmNoOiBmdW5jdGlvbihpZDogc3RyaW5nKXtcbiAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZShjb25maWcucm9vdCArICdhcGkvcmVzdC9kaXNwbGF5L3NzZWFyY2gvJyArIGlkKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIC8vIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAvLyAgIGVudHJ5KGlkKTtcbiAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIG9yZGVyOiBmdW5jdGlvbihpZDogYW55LCBiZWZvcmVJZDogYW55LCBhZnRlcklkOiBhbnkpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAnJztcbiAgICAgICAgaWYgKGJlZm9yZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSArPSAnYmVmb3JlPScgKyBiZWZvcmVJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YSAhPT0gJycpIHtcbiAgICAgICAgICBkYXRhICs9ICcmJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhZnRlcklkICE9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSArPSAnYWZ0ZXI9JyArIGFmdGVySWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIHN1Z2FyLnBvc3RGb3JtKCdhcGkvcmVzdC9kaXNwbGF5L3NzZWFyY2gvJyArIGlkICsgJy9vcmRlcicsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuIiwibW9kdWxlIHZzLnRvb2xzLnRyYW5zbGF0ZSB7XG5cbiAgZXhwb3J0IGNsYXNzIFRyYW5zbGF0b3Ige1xuXG4gICAgcHJpdmF0ZSBmaWVsZHM6IGFueSA9IG51bGw7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogYW55LCBwcml2YXRlICRodHRwOiBuZy5JSHR0cFNlcnZpY2UsIHByaXZhdGUgJHE6IG5nLklRU2VydmljZSkge1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkKCkge1xuICAgICAgdmFyIHJlc291cmNlVXJsID0gdGhpcy5jb25maWcucm9vdCArICdhcGkvcmVzdC9pMThuL2ZpZWxkcy9zdGFuZGFyZC5qc29uJztcblxuICAgICAgaWYgKCF0aGlzLmZpZWxkcykge1xuICAgICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQocmVzb3VyY2VVcmwpLnRoZW4oKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5maWVsZHMgPSByZXMuZGF0YTtcbiAgICAgICAgICByZXR1cm4gcmVzLmRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHEud2hlbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2xhdGVGaWVsZChmaWVsZDogc3RyaW5nKSB7XG4gICAgICB2YXIgdHJhbnNsYXRlZCA9IHRoaXMuZmllbGRzLkZJRUxEW2ZpZWxkXTtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCh0cmFuc2xhdGVkKSkge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzaWZ5KGZpZWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNsYXNzaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXy9nLCAnICcpO1xuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHdcXFMqL2csIGZ1bmN0aW9uKHR4dDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0cmFuc2xhdG9yLnRzXCIgLz5cbm1vZHVsZSB2cy50b29scy50cmFuc2xhdGUge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZGVjbGFyZSB2YXIgY29uZmlnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy50cmFuc2xhdGUnLCBbXSlcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICAuZmFjdG9yeSgndHJhbnNsYXRvcicsIChjb25maWc6IGFueSwgJGh0dHA6IG5nLklIdHRwU2VydmljZSwgJHE6IG5nLklRU2VydmljZSkgPT4gbmV3IFRyYW5zbGF0b3IoY29uZmlnLCAkaHR0cCwgJHEpKVxuICAgIC5jb25zdGFudCgnY29uZmlnJywgY29uZmlnKTtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzdWdhci50c1wiIC8+XG5tb2R1bGUgdnMudG9vbHMudXRpbCB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgndnMudG9vbHMudXRpbCcsIFtdKVxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIC5mYWN0b3J5KCdzdWdhcicsIChjb25maWcsICRodHRwKSA9PiBTdWdhci5nZXRJbnN0YW5jZShjb25maWcsICRodHRwKSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (value.docs) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                return Sugar;\n            })();\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        fl = fl.split(',');\n                        return _this.sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = _this.sugar.pluck(fields, 'name');\n                            // http://voyagerdemo.com/daily/solr/v0/select?&rows=0&wt=json&facet=true&facet.field=format\n                            return _this.sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return {\n                        params: {\n                            q: '*:*',\n                            fl: fl,\n                            rows: 10000,\n                            sort: 'name%20asc',\n                            wt: 'json'\n                        }\n                    };\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return {\n                        params: {\n                            facets: true,\n                            'facet.field': fl,\n                            'facet.limit': 10000,\n                            'facet.mincount': 100,\n                            rows: 0,\n                            wt: 'json'\n                        }\n                    };\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            // fields[i].id = statsField;  TODO  why?\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            })();\n            _fields.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', []).service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); }).constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', []).factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}