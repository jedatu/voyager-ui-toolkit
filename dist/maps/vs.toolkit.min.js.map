{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","filters","filter","hayStack","oldNeedle","newNeedle","replace","fields","_fields","FieldResourceService","$http","_this","this","gettingFields","fl","jsonp","root","then","res","data","response","docs","bind","refName","service","pageConfig","factory","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getPageConfigList","get","error","console","log","_getPageConfig","_deletePageConfig","_savePageConfig","template","post","getPageConfigs","getPageConfig","deletePageConfig","savePageConfig","savedSearch","_getQueryString","rows","_execute","getSavedSearches","deleteSearch","order","beforeId","afterId","translate","Translator","$q","prototype","load","resourceUrl","when","translateField","field","translated","FIELD","isDefined","capitalizeEachWord","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"AAAA,GAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAS,WAET,QAASA,GAAOC,GAEZA,EAAaC,cAAa,GAG9B,MCAAF,GAAOG,SAAW,gBDAXH,IAEXD,GAAMC,OAASA,GAChBD,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIK,GAAW,WAEX,QAASA,GAASC,GACdA,EAAKC,MAAM,gBAEf,MCCAF,GAASD,SAAW,QDDbC,IAEXL,GAAMK,SAAWA,GAClBL,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAKV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACAQ,SAAQC,OAAO,eAAgBC,OAAOV,EAAMC,QAAQU,IAAIX,EAAMK,UAAUO,SAAS,SAAUF,SAC5FV,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIa,IACJ,SAAWA,GACP,YACAL,SAAQC,OAAO,uBAAwBK,OAAO,gBAAiB,WAC3D,MAAO,UAAUC,EAAUC,EAAWC,GAClC,MAAOF,GAASG,QAAQF,EAAWC,OAG5CJ,EAAUb,EAAMa,UAAYb,EAAMa,cACtCb,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAGV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAImB,IACJ,SAAWC,GACP,YACA,IAAIC,GAAuB,WAEvB,QAASA,GAAqBC,GAC1B,GAAIC,GAAQC,IACZA,MAAKF,MAAQA,EACbE,KAAKC,cAAgB,SAAUN,GAC3B,GAAIO,GAAMP,GAAU,4BACpB,OAAOI,GAAMD,MAAMK,MAAMjB,OAAOkB,KAAO,+EAA+EV,QAAQ,WAAYQ,IAAKG,KAAK,SAAUC,GAC1J,MAAOA,GAAIC,KAAKC,SAASC,MAC3BC,KAAKX,KAIf,MCCAF,GAAqBjB,SAAW,SDFhCiB,EAAqBc,QAAU,uBACxBd,IAEXD,GAAQC,qBAAuBA,GAChCF,EAASnB,EAAMmB,SAAWnB,EAAMmB,aACpCnB,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAIV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAImB,IACJ,SAAWA,GACP,YACAX,SAAQC,OAAO,sBAAuB2B,QAAQjB,EAAOE,qBAAqBc,QAAShB,EAAOE,uBAC3FF,EAASnB,EAAMmB,SAAWnB,EAAMmB,aACpCnB,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIqC,IACJ,SAAWA,GACP,YACA7B,SAAQC,OAAO,2BAChB4B,EAAarC,EAAMqC,aAAerC,EAAMqC,iBAC5CrC,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,uBAAuB6B,QAAQ,sBAAA,QAAsB,SAAUhB,GAC1E,YAEA,SAASiB,KACL,GAAIC,GAAcC,EAAY,MAE9B,OADAD,IAAe,SAAWE,KAAKC,SAGnC,QAASC,GAAsBC,GAC3B,GAAIL,GAAcC,EAAYI,CAE9B,OADAL,IAAe,SAAWE,KAAKC,SAGnC,QAASG,KACL,MAAOxB,GAAMyB,IAAIR,KAAuBV,KAAK,SAAUE,GACnD,MAAOA,IACR,SAAUiB,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAASG,GAAeN,GACpB,MAAOvB,GAAMyB,IAAIH,EAAsBC,IAAKhB,KAAK,SAAUE,GACvD,MAAOA,IACR,SAAUiB,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAASI,GAAkBP,GACvB,MAAOvB,GAAAA,UAAasB,EAAsBC,IAAKhB,KAAK,SAAUE,GAC1D,MAAOA,IACR,SAAUiB,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,QAASK,GAAgBC,GACrB,MAAOhC,GAAMiC,KAAKd,EAAWa,GAAUzB,KAAK,SAAUE,GAClD,MAAOA,IACR,SAAUiB,GAGT,MADAC,SAAQC,IAAIF,GACLA,IA5Cf,GAAIP,GAAY/B,OAAOkB,KAAO,0BA+C9B,QACI4B,eAAgB,WACZ,MAAOV,MAEXW,cAAe,SAAUZ,GACrB,MAAOM,GAAeN,IAE1Ba,iBAAkB,SAAUb,GACxB,MAAOO,GAAkBP,IAE7Bc,eAAgB,SAAUL,GACtB,MAAOD,GAAgBC,OAKnC,IAAIvD,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAI4D,IACJ,SAAWA,GACP,YACApD,SAAQC,OAAO,4BAChBmD,EAAc5D,EAAM4D,cAAgB5D,EAAM4D,kBAC9C5D,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVS,QAAQC,OAAO,wBAAwB6B,QAAQ,uBAAA,QAAuB,SAAUhB,GAC5E,YAMA,SAASuC,KACL,GAAIC,GAAO,IACPtB,EAAc9B,OAAOkB,KAAO,sBAIhC,OAHAY,IAAe,QAAUsB,EAAO,SAAWpB,KAAKC,SAChDH,GAAe,uHACfA,GAAe,kCAGnB,QAASuB,KACL,MAAOzC,GAAMK,MAAMkC,KAAmBhC,KAAK,SAAUE,GACjD,MAAOA,GAAKA,KAAKC,SAASC,MAC3B,SAAUe,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,OACIgB,iBAAkB,WACd,MAAOD,MAOXE,aAAc,SAAUpB,GACpB,MAAOvB,GAAAA,UAAaZ,OAAOkB,KAAO,4BAA8BiB,GAAIhB,KAAK,eAM7EqC,MAAO,SAAUrB,EAAIsB,EAAUC,GAC3B,GAAIrC,GAAO,EACM,QAAboC,IACApC,GAAQ,UAAYoC,GAEX,KAATpC,IACAA,GAAQ,KAEI,OAAZqC,IACArC,GAAQ,SAAWqC,OAOnC,IAAIrE,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIqE,IACJ,SAAWA,GACP,GAAIC,GAAa,WAEb,QAASA,GAAW5D,EAAQY,EAAOiD,GAC/B/C,KAAKd,OAASA,EACdc,KAAKF,MAAQA,EACbE,KAAK+C,GAAKA,EACV/C,KAAKL,OAAS,KAiClB,MC5BAmD,GAAWlE,SAAW,SAAU,QAAS,MDHzCkE,EAAWE,UAAUC,KAAO,WACxB,GAAIlD,GAAQC,KACRkD,EAAclD,KAAKd,OAAOkB,KAAO,oCACrC,OAAKJ,MAAKL,OAOCK,KAAK+C,GAAGI,WANfnD,MAAKF,MAAMyB,IAAI2B,GAAa7C,KAAK,SAAUC,GACvCP,EAAMJ,OAASW,EAAIC,QAQ/BuC,EAAWE,UAAUI,eAAiB,SAAUC,GAC5C,GAAIC,GAAatD,KAAKL,OAAO4D,MAAMF,EACnC,OAAIrE,SAAQwE,UAAUF,GACXA,EAGAtD,KAAKyD,mBAAmBJ,IAGvCP,EAAWE,UAAUS,mBAAqB,SAAUC,GAKhD,MAAOA,GAAIhE,QAAQ,KAAM,SAAUiE,GAC/B,MAAOA,GAAIC,OAAO,GAAGC,cAAgBF,EAAIG,OAAO,GAAGC,iBAGpDjB,IAEXD,GAAUC,WAAaA,GACxBD,EAAYrE,EAAMqE,YAAcrE,EAAMqE,gBAC1CrE,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAGV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIqE,IACJ,SAAWA,GACP,YACA7D,SAAQC,OAAO,yBAA0B6B,QAAQ,cAAA,SAAA,QAAA,KAAc,SAAU5B,EAAQY,EAAOiD,GAAM,MAAO,IAAIF,GAAUC,WAAW5D,EAAQY,EAAOiD,OAC9IF,EAAYrE,EAAMqE,YAAcrE,EAAMqE,gBAC1CrE,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldResourceService = (function () {\n                /* @ngInject */\n                function FieldResourceService($http) {\n                    var _this = this;\n                    this.$http = $http;\n                    this.gettingFields = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return _this.$http.jsonp(config.root + 'solr/fields/select?q=*:*&fl={FIELDS}&wt=json&rows=500&json.wrf=JSON_CALLBACK'.replace('{FIELDS}', fl)).then(function (res) {\n                            return res.data.response.docs;\n                        }.bind(_this));\n                    };\n                }\n                FieldResourceService.refName = 'fieldResourceService';\n                return FieldResourceService;\n            })();\n            _fields.FieldResourceService = FieldResourceService;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', []).service(fields.FieldResourceService.refName, fields.FieldResourceService);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.capitalizeEachWord(field);\n                    }\n                };\n                Translator.prototype.capitalizeEachWord = function (str) {\n                    // str = str.replace(/_/g, ' ');\n                    // return str.replace(/\\w\\S*/g, function(txt) {\n                    //   return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    // });\n                    return str.replace(/_/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); });\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldResourceService = (function () {\n                /* @ngInject */\n                function FieldResourceService($http) {\n                    var _this = this;\n                    this.$http = $http;\n                    this.gettingFields = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return _this.$http.jsonp(config.root + 'solr/fields/select?q=*:*&fl={FIELDS}&wt=json&rows=500&json.wrf=JSON_CALLBACK'.replace('{FIELDS}', fl)).then(function (res) {\n                            return res.data.response.docs;\n                        }.bind(_this));\n                    };\n                }\n                FieldResourceService.refName = 'fieldResourceService';\n                return FieldResourceService;\n            })();\n            _fields.FieldResourceService = FieldResourceService;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', []).service(fields.FieldResourceService.refName, fields.FieldResourceService);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.capitalizeEachWord(field);\n                    }\n                };\n                Translator.prototype.capitalizeEachWord = function (str) {\n                    // str = str.replace(/_/g, ' ');\n                    // return str.replace(/\\w\\S*/g, function(txt) {\n                    //   return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    // });\n                    return str.replace(/_/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); });\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}