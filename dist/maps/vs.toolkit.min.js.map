{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","displayConfig","factory","$http","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getDisplayConfigList","get","then","data","error","console","log","_getDisplayConfig","_deleteDisplayConfig","_saveDisplayConfig","template","post","root","getDisplayConfigs","getDisplayConfig","deleteDisplayConfig","saveDisplayConfig","util","Sugar","this","isString","val","String","getInstance","prototype","toMap","key","array","map","forEach","value","toStringMap","pluck","name","fn","fl","push","isUndefined","postForm","url","service","method","withCredentials","headers","Content-Type","parseQueryString","s","pairs","slice","split","result","pair","decodeURIComponent","JSON","parse","stringify","postJson","request","api","action","fields","fields_1","FieldsResource","sugar","_this","fetch","getFieldsParams","res","response","docs","fetchHydrationStats","query","field","indexOf","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","i","length","getCount","hydration","refName","filters","filter","hayStack","oldNeedle","newNeedle","replace","translate","Translator","$q","load","resourceUrl","when","translateField","translated","FIELD","isDefined","classify","str","txt","charAt","toUpperCase","substr","toLowerCase","pageConfig","_getPageConfigList","_getPageConfig","_deletePageConfig","_savePageConfig","getPageConfigs","getPageConfig","deletePageConfig","savePageConfig","savedSearch","_doSave","_getQueryString","rows","_execute","jsonp","getSavedSearches","saveSearch","params","deleteSearch","order","beforeId","afterId","fetchLabels","Date","getTime","resp","labels"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').\n    /* @ngInject */\n    factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            Config.$inject = [\"$logProvider\"];\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            RunBlock.$inject = [\"$log\"];\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                FieldsResource.$inject = [\"sugar\"];\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', [\"config\", \"$http\", function (config, $http) { return util.Sugar.getInstance(config, $http); }]);\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                Translator.$inject = [\"config\", \"$http\", \"$q\"];\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', [\"config\", \"$http\", \"$q\", function (config, $http, $q) { return new translate.Translator(config, $http, $q); }])\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').\n    /* @ngInject */\n    factory('pageConfigResource', [\"$http\", function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n}]);\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', [\"$http\", \"sugar\", function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n}]);\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}