{"version":3,"sources":["/source/vs.toolkit.min.js","vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","$inject","RunBlock","$log","debug","angular","module","config","run","constant","util","Sugar","$http","this","isString","val","String","getInstance","prototype","toMap","key","array","map","forEach","value","toStringMap","pluck","name","fl","docs","push","postForm","url","data","service","root","method","withCredentials","headers","Content-Type","fields","_fields","FieldsResource","sugar","_this","fetch","getFieldsParams","then","res","response","fetchHydrationStats","query","getStatsParams","statsFields","facet_counts","facet_fields","total","numFound","applyHydration","join","statsField","count","i","length","getCount","hydration","field","refName","filters","filter","hayStack","oldNeedle","newNeedle","replace","pageConfig","factory","_getListQueryString","queryString","configUri","Math","random","_getConfigQueryString","id","_getPageConfigList","get","error","console","log","_getPageConfig","_deletePageConfig","_savePageConfig","template","post","getPageConfigs","getPageConfig","deletePageConfig","savePageConfig","savedSearch","_getQueryString","rows","_execute","jsonp","getSavedSearches","deleteSearch","order","beforeId","afterId","translate","Translator","$q","load","resourceUrl","when","translateField","translated","FIELD","isDefined","classify","str","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (value.docs) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                return Sugar;\n            })();\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name');\n                            // http://voyagerdemo.com/daily/solr/v0/select?&rows=0&wt=json&facet=true&facet.field=format\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facets=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            // fields[i].id = statsField;  TODO  why?\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            })();\n            _fields.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util']).service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', []).factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); }).constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,","var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (value.docs) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                return Sugar;\n            })();\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name');\n                            // http://voyagerdemo.com/daily/solr/v0/select?&rows=0&wt=json&facet=true&facet.field=format\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facets=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            // fields[i].id = statsField;  TODO  why?\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            })();\n            _fields.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util']).service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var pageConfig;\n        (function (pageConfig) {\n            'use strict';\n            angular.module('vs.tools.pageConfig', []);\n        })(pageConfig = tools.pageConfig || (tools.pageConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.pageConfig').factory('pageConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getPageConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getPageConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deletePageConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _savePageConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getPageConfigs: function () {\n            return _getPageConfigList();\n        },\n        getPageConfig: function (id) {\n            return _getPageConfig(id);\n        },\n        deletePageConfig: function (id) {\n            return _deletePageConfig(id);\n        },\n        savePageConfig: function (template) {\n            return _savePageConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http) {\n    'use strict';\n    // function _doSave(request: any) {\n    //   request.query += '/disp=' + request.config;\n    //   request.path = request.query;\n    //   // return sugar.postJson(request, 'display', 'ssearch');\n    // }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', []).factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); }).constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}