{"version":3,"sources":["vs.toolkit.min.js"],"names":["vs","tools","Config","$logProvider","debugEnabled","RunBlock","$log","debug","angular","module","config","run","filters","filter","hayStack","oldNeedle","newNeedle","replace","savedSearch","factory","$http","$q","_getQueryString","rows","queryString","root","Math","random","_execute","jsonp","then","data","response","docs","error","console","log","getSavedSearches","deleteSearch","id","order","beforeId","afterId"],"mappings":"AAAA,GAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAIC,GAAS,WAET,QAASA,GAAOC,GAEZA,EAAaC,cAAa,GAG9B,MAAOF,KAEXD,GAAMC,OAASA,GAChBD,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACA,IAAII,GAAW,WAEX,QAASA,GAASC,GACdA,EAAKC,MAAM,gBAEf,MAAOF,KAEXJ,GAAMI,SAAWA,GAClBJ,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAKV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,YACAO,SAAQC,OAAO,eACVC,OAAOT,EAAMC,QACbS,IAAIV,EAAMI,WAChBJ,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIW,IACJ,SAAWA,GACP,YACAJ,SAAQC,OAAO,uBACVI,OAAO,gBAAiB,WACzB,MAAO,UAAUC,EAAUC,EAAWC,GAClC,MAAOF,GAASG,QAAQF,EAAWC,OAG5CJ,EAAUX,EAAMW,UAAYX,EAAMW,cACtCX,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,OAEV,IAAIA,KACJ,SAAWA,GACP,GAAIC,IACJ,SAAWA,GACP,GAAIiB,IACJ,SAAWA,GACP,YACAV,SAAQC,OAAO,4BAChBS,EAAcjB,EAAMiB,cAAgBjB,EAAMiB,kBAC9CjB,EAAQD,EAAGC,QAAUD,EAAGC,YAC5BD,KAAOA,QAEVQ,QAAQC,OAAO,wBACXU,QAAQ,sBAAuB,SAAUC,EAAOC,GAChD,YAMA,SAASC,KACL,GAAIC,GAAO,IACPC,EAAcd,OAAOe,KAAO,sBAIhC,OAHAD,IAAe,QAAUD,EAAO,SAAWG,KAAKC,SAChDH,GAAe,uHACfA,GAAe,kCAGnB,QAASI,KACL,MAAOR,GAAMS,MAAMP,KAAmBQ,KAAK,SAAUC,GACjD,MAAOA,GAAKA,KAAKC,SAASC,MAC3B,SAAUC,GAGT,MADAC,SAAQC,IAAIF,GACLA,IAGf,OACIG,iBAAkB,WACd,MAAOT,MAOXU,aAAc,SAAUC,GACpB,MAAOnB,GAAAA,UAAaV,OAAOe,KAAO,4BAA8Bc,GAAIT,KAAK,eAM7EU,MAAO,SAAUD,EAAIE,EAAUC,GAC3B,GAAIX,GAAO,EACM,QAAbU,IACAV,GAAQ,UAAYU,GAEX,KAATV,IACAA,GAAQ,KAEI,OAAZW,IACAX,GAAQ,SAAWW","file":"vs.toolkit.min.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', []);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    factory('savedSearchResource', function ($http, $q) {\n    'use strict';\n    function _doSave(request) {\n        request.query += '/disp=' + request.config;\n        request.path = request.query;\n        // return sugar.postJson(request, 'display', 'ssearch');\n    }\n    function _getQueryString() {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle]';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        return queryString;\n    }\n    function _execute() {\n        return $http.jsonp(_getQueryString()).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        // saveSearch: function(savedSearch, params) {\n        //   savedSearch.config = configService.getConfigId();\n        //   savedSearch.query = converter.toClassicParams(params);\n        //   return _doSave(savedSearch);\n        // },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        }\n    };\n});\n\n//# sourceMappingURL=data:application/json;base64,\n"],"sourceRoot":"/source/"}