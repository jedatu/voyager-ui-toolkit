{"version":3,"sources":["vs.toolkit.min.js"],"names":[],"mappingsfile":"vs.toolkit.src.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        }());\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        }());\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', [])\n            .config(tools.Config)\n            .run(tools.RunBlock)\n            .constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var catalog;\n        (function (catalog) {\n            'use strict';\n            angular.module('vs.tools.catalog', []);\n        })(catalog = tools.catalog || (tools.catalog = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.catalog').\n    /* @ngInject */\n    factory('catalogResource', function ($http, $q) {\n    'use strict';\n    var uri = config.root + 'api/rest/index/config/federation.json';\n    var locations = 'api/rest/i18n/field/location.json';\n    function _fetch() {\n        return $http.get(uri).then(function (res) {\n            return res.data.servers;\n        }, function (error) {\n            console.log(error);\n            return error;\n        });\n    }\n    function _loadRemoteLocations(params) {\n        return _fetch().then(function (catalogs) {\n            var promises = [];\n            catalogs.forEach(function (catalog) {\n                if (angular.isDefined(catalog.url)) {\n                    var url = catalog.url + locations;\n                    var catalogPromise = $http.get(url, { withCredentials: false }).then(function (response) {\n                        return response;\n                    });\n                    promises.push(catalogPromise);\n                }\n            });\n            return $q.all(promises).then(function (res) {\n                return res;\n            }, function (error) {\n                return error; // failure means the remote catalogs are offline, allow to continue, the search should show an error\n            });\n        });\n    }\n    return {\n        fetch: _fetch,\n        loadRemoteLocations: _loadRemoteLocations\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').\n    /* @ngInject */\n    factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            }());\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields_1) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,stype,category,docs,disp_en,sortable,filterable,tableable,displayable,editable');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            _this.ensureTagsFieldExist(res.data.response.docs);\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.ensureTagsFieldExist = function (fields) {\n                        var found = false;\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (fields[i].name === 'tag_tags') {\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            fields.push({\n                                category: 'TEXT',\n                                disp_en: 'Tags',\n                                displayable: true,\n                                docs: 0,\n                                filterable: true,\n                                name: 'tag_tags',\n                                sortable: false,\n                                stype: 'string',\n                                tableable: false\n                            });\n                        }\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) { return field.name.indexOf('_') !== 0 && field.docs > 0; });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json&rand=' + Math.random();\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=') + '&rand=' + Math.random();\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            }());\n            fields_1.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util'])\n                .service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', [])\n                .filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(new RegExp(oldNeedle, 'g'), newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').\n    /* @ngInject */\n    factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    var _this = this;\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                    this.removePrefixHash = {};\n                    var removePrefixList = ['fs_', 'ft_', 'fh_', 'fi_', 'fl_', 'fd_', 'ff_', 'fu_', 'fp_', 'fy_', 'fm_', 'fb_', 'tag_', 'meta_', 'fss_'];\n                    removePrefixList.forEach(function (item) {\n                        _this.removePrefixHash[item] = true;\n                        var c = item.substring(1, 2);\n                        var key = item.replace('_', c + '_');\n                        _this.removePrefixHash[key] = true;\n                    });\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var idx = field.indexOf('_');\n                    if (idx > -1) {\n                        var prefix = field.substring(0, idx + 1);\n                        if (this.removePrefixHash[prefix]) {\n                            field = field.replace(prefix, '');\n                        }\n                    }\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            }());\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', [])\n                .factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); })\n                .constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', [])\n                .factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmNvbmZpZy50cyIsImluZGV4LnJ1bi50cyIsImluZGV4Lm1vZHVsZS50cyIsImNhdGFsb2cvQ2F0YWxvZ01vZHVsZS50cyIsImNhdGFsb2cvQ2F0YWxvZ1Jlc291cmNlLnRzIiwiZGlzcGxheS1jb25maWcvRGlzcGxheUNvbmZpZ01vZHVsZS50cyIsImRpc3BsYXktY29uZmlnL0Rpc3BsYXlDb25maWdSZXNvdXJjZS50cyIsInV0aWwvc3VnYXIudHMiLCJmaWVsZHMvZmllbGRzLnJlc291cmNlLnRzIiwiZmllbGRzL2ZpZWxkcy5tb2R1bGUudHMiLCJmaWx0ZXJzL2ZpbHRlcnMudHMiLCJzYXZlZC1zZWFyY2gvc2F2ZWQtc2VhcmNoLW1vZHVsZS50cyIsInNhdmVkLXNlYXJjaC9zYXZlZFNlYXJjaC5yZXNvdXJjZS50cyIsInRyYW5zbGF0ZS90cmFuc2xhdG9yLnRzIiwidHJhbnNsYXRlL3RyYW5zbGF0ZS5tb2R1bGUudHMiLCJ1dGlsL3V0aWwubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sRUFBRSxDQVlSO0FBWkQsV0FBTyxFQUFFO0lBQUMsSUFBQSxLQUFLLENBWWQ7SUFaUyxXQUFBLEtBQUssRUFBQyxDQUFDO1FBQ2YsWUFBWSxDQUFDO1FBRWI7WUFDRSxnQkFBZ0I7WUFDaEIsZ0JBQVksWUFBNkI7Z0JBQ3ZDLGFBQWE7Z0JBQ2IsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEMsOEJBQThCO1lBQ2hDLENBQUM7WUFFSCxhQUFDO1FBQUQsQ0FSQSxBQVFDLElBQUE7UUFSWSxZQUFNLFNBUWxCLENBQUE7SUFDSCxDQUFDLEVBWlMsS0FBSyxHQUFMLFFBQUssS0FBTCxRQUFLLFFBWWQ7QUFBRCxDQUFDLEVBWk0sRUFBRSxLQUFGLEVBQUUsUUFZUjs7QUNaRCxJQUFPLEVBQUUsQ0FVUjtBQVZELFdBQU8sRUFBRTtJQUFDLElBQUEsS0FBSyxDQVVkO0lBVlMsV0FBQSxLQUFLLEVBQUMs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Q0FBQztZQUliLE9BQU8sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDO2lCQUVyQyxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQUMsTUFBVyxFQUFFLEtBQXNCLEVBQUUsRUFBZ0IsSUFBSyxPQUFBLElBQUksb0JBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFqQyxDQUFpQyxDQUFDO2lCQUNuSCxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFUZSxTQUFTLEdBQVQsZUFBUyxLQUFULGVBQVMsUUFTeEI7SUFBRCxDQUFDLEVBVFMsS0FBSyxHQUFMLFFBQUssS0FBTCxRQUFLLFFBU2Q7QUFBRCxDQUFDLEVBVE0sRUFBRSxLQUFGLEVBQUUsUUFTUjs7QUNWRCxpQ0FBaUM7QUFDakMsSUFBTyxFQUFFLENBTVI7QUFORCxXQUFPLEVBQUU7SUFBQyxJQUFBLEtBQUssQ0FNZDtJQU5TLFdBQUEsS0FBSztRQUFDLElBQUEsSUFBSSxDQU1uQjtRQU5lLFdBQUEsSUFBSSxFQUFDLENBQUM7WUFDcEIsWUFBWSxDQUFDO1lBRWIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO2lCQUVoQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQUMsTUFBTSxFQUFFLEtBQUssSUFBSyxPQUFBLFVBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFoQyxDQUFnQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxFQU5lLElBQUksR0FBSixVQUFJLEtBQUosVUFBSSxRQU1uQjtJQUFELENBQUMsRUFOUyxLQUFLLEdBQUwsUUFBSyxLQUFMLFFBQUssUUFNZDtBQUFELENBQUMsRUFOTSxFQUFFLEtBQUYsRUFBRSxRQU1SIiwiZmlsZSI6InZzLnRvb2xraXQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIHZzLnRvb2xzIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGV4cG9ydCBjbGFzcyBDb25maWcge1xyXG4gICAgLyoqIEBuZ0luamVjdCAqL1xyXG4gICAgY29uc3RydWN0b3IoJGxvZ1Byb3ZpZGVyOiBuZy5JTG9nUHJvdmlkZXIpIHtcclxuICAgICAgLy8gZW5hYmxlIGxvZ1xyXG4gICAgICAkbG9nUHJvdmlkZXIuZGVidWdFbmFibGVkKHRydWUpO1xyXG4gICAgICAvLyBzZXQgb3B0aW9ucyB0aGlyZC1wYXJ0eSBsaWJcclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcbiIsIm1vZHVsZSB2cy50b29scyB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBleHBvcnQgY2xhc3MgUnVuQmxvY2sge1xyXG4gICAgLyoqIEBuZ0luamVjdCAqL1xyXG4gICAgY29uc3RydWN0b3IoJGxvZzogbmcuSUxvZ1NlcnZpY2UpIHtcclxuICAgICAgJGxvZy5kZWJ1ZygncnVuQmxvY2sgZW5kJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuXHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJpbmRleC5jb25maWcudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiaW5kZXgucnVuLnRzXCIgLz5cclxuXHJcbm1vZHVsZSB2cy50b29scyB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBkZWNsYXJlIHZhciBjb25maWc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scycsIFtdKVxyXG4gICAgLmNvbmZpZyhDb25maWcpXHJcbiAgICAucnVuKFJ1bkJsb2NrKVxyXG4gICAgLmNvbnN0YW50KCdjb25maWcnLCBjb25maWcpO1xyXG59XHJcbiIsIm1vZHVsZSB2cy50b29scy5jYXRhbG9nIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5jYXRhbG9nJywgW10pO1xyXG59XHJcbiIsIi8qZ2xvYmFsIGFuZ3VsYXIsICQsIHF1ZXJ5c3RyaW5nLCBjb25maWcgKi9cclxuZGVjbGFyZSB2YXIgY29uZmlnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLmNhdGFsb2cnKS5cclxuXHQvKiBAbmdJbmplY3QgKi9cclxuXHRmYWN0b3J5KCdjYXRhbG9nUmVzb3VyY2UnLCBmdW5jdGlvbiAoJGh0dHA6IGFueSwgJHE6IGFueSkge1xyXG5cclxuXHRcdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0XHR2YXIgdXJpID0gY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvaW5kZXgvY29uZmlnL2ZlZGVyYXRpb24uanNvbic7XHJcblx0XHR2YXIgbG9jYXRpb25zID0gJ2FwaS9yZXN0L2kxOG4vZmllbGQvbG9jYXRpb24uanNvbic7XHJcblxyXG5cdFx0ZnVuY3Rpb24gX2ZldGNoKCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KHVyaSkudGhlbihmdW5jdGlvbiAocmVzOiBhbnkpIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVzLmRhdGEuc2VydmVycztcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0XHRyZXR1cm4gZXJyb3I7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIF9sb2FkUmVtb3RlTG9jYXRpb25zKHBhcmFtczogYW55KSB7XHJcblx0XHRcdHJldHVybiBfZmV0Y2goKS50aGVuKChjYXRhbG9nczogYW55KSA9PiB7XHJcblx0XHRcdFx0dmFyIHByb21pc2VzID0gW107XHJcblx0XHRcdFx0Y2F0YWxvZ3MuZm9yRWFjaChjYXRhbG9nID0+IHtcclxuXHRcdFx0XHRcdGlmIChhbmd1bGFyLmlzRGVmaW5lZChjYXRhbG9nLnVybCkpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHVybCA9IGNhdGFsb2cudXJsICsgbG9jYXRpb25zO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2F0YWxvZ1Byb21pc2UgPSAkaHR0cC5nZXQodXJsLCB7d2l0aENyZWRlbnRpYWxzOiBmYWxzZX0pLnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2U7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGNhdGFsb2dQcm9taXNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gJHEuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlcztcclxuXHRcdFx0XHR9LCBmdW5jdGlvbihlcnJvcikge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVycm9yOyAvLyBmYWlsdXJlIG1lYW5zIHRoZSByZW1vdGUgY2F0YWxvZ3MgYXJlIG9mZmxpbmUsIGFsbG93IHRvIGNvbnRpbnVlLCB0aGUgc2VhcmNoIHNob3VsZCBzaG93IGFuIGVycm9yXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGZldGNoOiBfZmV0Y2gsXHJcblx0XHRcdGxvYWRSZW1vdGVMb2NhdGlvbnM6IF9sb2FkUmVtb3RlTG9jYXRpb25zXHJcblx0XHR9O1xyXG5cdH0pO1xyXG4iLCJtb2R1bGUgdnMudG9vbHMuZGlzcGxheUNvbmZpZyB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgndnMudG9vbHMuZGlzcGxheUNvbmZpZycsIFtdKTtcclxufVxyXG4iLCIvKmdsb2JhbCBhbmd1bGFyLCAkLCBxdWVyeXN0cmluZywgY29uZmlnICovXHJcbmRlY2xhcmUgdmFyIGNvbmZpZztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5kaXNwbGF5Q29uZmlnJykuXHJcblx0LyogQG5nSW5qZWN0ICovXHJcblx0ZmFjdG9yeSgnZGlzcGxheUNvbmZpZ1Jlc291cmNlJywgZnVuY3Rpb24gKCRodHRwOiBhbnkpIHtcclxuXHJcblx0XHQndXNlIHN0cmljdCc7XHJcblxyXG5cdFx0dmFyIGNvbmZpZ1VyaSA9IGNvbmZpZy5yb290ICsgJ2FwaS9yZXN0L2Rpc3BsYXkvY29uZmlnLyc7XHJcblxyXG5cdFx0ZnVuY3Rpb24gX2dldExpc3RRdWVyeVN0cmluZygpIHtcclxuXHRcdFx0dmFyIHF1ZXJ5U3RyaW5nID0gY29uZmlnVXJpICsgJ2xpc3QnO1xyXG5cdFx0XHRxdWVyeVN0cmluZyArPSAnP3JhbmQ9JyArIE1hdGgucmFuZG9tKCk7XHJcblx0XHRcdHJldHVybiBxdWVyeVN0cmluZztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBfZ2V0Q29uZmlnUXVlcnlTdHJpbmcoaWQ6IHN0cmluZykge1xyXG5cdFx0XHR2YXIgcXVlcnlTdHJpbmcgPSBjb25maWdVcmkgKyBpZDtcclxuXHRcdFx0cXVlcnlTdHJpbmcgKz0gJz9yYW5kPScgKyBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0XHRyZXR1cm4gcXVlcnlTdHJpbmc7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gX2dldERpc3BsYXlDb25maWdMaXN0KCkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KF9nZXRMaXN0UXVlcnlTdHJpbmcoKSkudGhlbihmdW5jdGlvbiAoZGF0YTogYW55KSB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yOiBhbnkpIHtcclxuXHRcdFx0XHQvLyBAVE9ETzogaGFuZGxlIGVycm9yXHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHRcdHJldHVybiBlcnJvcjtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gX2dldERpc3BsYXlDb25maWcoaWQ6IHN0cmluZykge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KF9nZXRDb25maWdRdWVyeVN0cmluZyhpZCkpLnRoZW4oZnVuY3Rpb24gKGRhdGE6IGFueSkge1xyXG5cdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHR9LCBmdW5jdGlvbihlcnJvcjogYW55KSB7XHJcblx0XHRcdFx0Ly8gQFRPRE86IGhhbmRsZSBlcnJvclxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0XHRyZXR1cm4gZXJyb3I7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIF9kZWxldGVEaXNwbGF5Q29uZmlnKGlkOiBzdHJpbmcpIHtcclxuXHRcdFx0cmV0dXJuICRodHRwLmRlbGV0ZShfZ2V0Q29uZmlnUXVlcnlTdHJpbmcoaWQpKS50aGVuKGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xyXG5cdFx0XHRcdC8vIEBUT0RPOiBoYW5kbGUgZXJyb3JcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdFx0cmV0dXJuIGVycm9yO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBfc2F2ZURpc3BsYXlDb25maWcodGVtcGxhdGU6IGFueSkge1xyXG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdChjb25maWdVcmksIHRlbXBsYXRlKS50aGVuKGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xyXG5cdFx0XHRcdC8vIEBUT0RPOiBoYW5kbGUgZXJyb3JcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdFx0cmV0dXJuIGVycm9yO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRnZXREaXNwbGF5Q29uZmlnczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9nZXREaXNwbGF5Q29uZmlnTGlzdCgpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRnZXREaXNwbGF5Q29uZmlnOiBmdW5jdGlvbihpZDogc3RyaW5nKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9nZXREaXNwbGF5Q29uZmlnKGlkKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVsZXRlRGlzcGxheUNvbmZpZzogZnVuY3Rpb24oaWQ6IHN0cmluZykge1xyXG5cdFx0XHRcdHJldHVybiBfZGVsZXRlRGlzcGxheUNvbmZpZyhpZCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHNhdmVEaXNwbGF5Q29uZmlnOiBmdW5jdGlvbih0ZW1wbGF0ZTogYW55KXtcclxuXHRcdFx0XHRyZXR1cm4gX3NhdmVEaXNwbGF5Q29uZmlnKHRlbXBsYXRlKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9KTtcclxuIiwibW9kdWxlIHZzLnRvb2xzLnV0aWwge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcblx0ZXhwb3J0IGNsYXNzIFN1Z2FyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogYW55LCBwcml2YXRlICRodHRwOiBuZy5JSHR0cFNlcnZpY2UpIHt9XHJcblxyXG5cdFx0cHVibGljIHN0YXRpYyBpc1N0cmluZyh2YWw6IGFueSkge1xyXG5cdFx0XHRyZXR1cm4gKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHZhbCBpbnN0YW5jZW9mIFN0cmluZyk7XHJcblx0XHR9XHJcblxyXG5cdFx0c3RhdGljIGdldEluc3RhbmNlKGNvbmZpZzogYW55LCAkaHR0cDogbmcuSUh0dHBTZXJ2aWNlKSA6IFN1Z2FyIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdWdhcihjb25maWcsICRodHRwKTtcclxuXHRcdH1cclxuXHJcblx0XHR0b01hcChrZXk6IGFueSwgYXJyYXk6IGFueSkge1xyXG5cdFx0XHR2YXIgbWFwID0ge307XHJcblx0XHRcdGFycmF5LmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRtYXBbdmFsdWVba2V5XV0gPSB2YWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBtYXA7XHJcblx0XHR9XHJcblxyXG5cdFx0dG9TdHJpbmdNYXAoYXJyYXk6IGFueSkge1xyXG5cdFx0XHR2YXIgbWFwID0ge307XHJcblx0XHRcdGFycmF5LmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcclxuXHRcdFx0XHRtYXBbdmFsdWVdID0gdmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gbWFwO1xyXG5cdFx0fVxyXG5cclxuICAgIHBsdWNrKGFycmF5OiBhbnksIG5hbWU6IHN0cmluZywgZm4/OiBGdW5jdGlvbikge1xyXG4gICAgICB2YXIgZmwgPSBbXTtcclxuICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZTogYW55KXtcclxuICAgICAgICBpZiAoZm4gJiYgZm4odmFsdWUpKSB7XHJcbiAgICAgICAgICBmbC5wdXNoKHZhbHVlW25hbWVdKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoZm4pKSB7XHJcbiAgICAgICAgICBmbC5wdXNoKHZhbHVlW25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZmw7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEZvcm0odXJsOiBzdHJpbmcsIGRhdGE6IGFueSkge1xyXG4gICAgICB2YXIgc2VydmljZSA9IHRoaXMuY29uZmlnLnJvb3QgKyB1cmw7XHJcbiAgICAgIHJldHVybiB0aGlzLiRodHRwKHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICB1cmw6IHNlcnZpY2UsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXHJcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmc6IHN0cmluZykge1xyXG4gICAgICB2YXIgcGFpcnMgPSBxdWVyeVN0cmluZy5zbGljZSgxKS5zcGxpdCgnJicpO1xyXG4gICAgICB2YXIgcmVzdWx0ID0ge30sIHM7XHJcbiAgICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24ocGFpcikge1xyXG4gICAgICAgIHMgPSBwYWlyLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgcmVzdWx0W3NbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KHNbMV0gfHwgJycpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zdEpzb24ocmVxdWVzdCwgYXBpLCBhY3Rpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJGh0dHAoe1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIHVybDogY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvJyArIGFwaSAgKyAnLycgKyBhY3Rpb24gKyAnLmpzb24nLFxyXG4gICAgICAgIGRhdGE6IHJlcXVlc3QsXHJcbiAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cdH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi91dGlsL3N1Z2FyLnRzXCIgLz5cblxubW9kdWxlIHZzLnRvb2xzLmZpZWxkcyB7XG4ndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0IGludGVyZmFjZSBJRmllbGRzUmVzb3VyY2Uge1xuXHRcdGZldGNoKGZpZWxkcz86IHN0cmluZyk6IG5nLklQcm9taXNlPGFueT47XG5cdFx0ZmV0Y2hIeWRyYXRpb25TdGF0cyhxdWVyeTogc3RyaW5nKTogbmcuSVByb21pc2U8YW55Pjtcblx0fVxuXG5cdGV4cG9ydCBjbGFzcyBGaWVsZHNSZXNvdXJjZSBpbXBsZW1lbnRzIElGaWVsZHNSZXNvdXJjZSB7XG5cdFx0c3RhdGljIHJlZk5hbWUgPSAnZmllbGRzUmVzb3VyY2UnO1xuXG5cdFx0ZmV0Y2g6IChwcm9wZXJ0aWVzPzogc3RyaW5nKSA9PiBhbnk7XG5cdFx0ZmV0Y2hIeWRyYXRpb25TdGF0czogKHF1ZXJ5OiBzdHJpbmcpID0+IGFueTtcblx0XHRlbnN1cmVUYWdzRmllbGRFeGlzdDogKGZpZWxkczogQXJyYXk8YW55PikgPT4gYW55O1xuXG5cdFx0LyogQG5nSW5qZWN0ICovXG5cdFx0Y29uc3RydWN0b3IocHJpdmF0ZSBzdWdhcjogYW55KSB7XG5cbiAgICAgIHRoaXMuZmV0Y2ggPSAoZmllbGRzPzogYW55KSA9PiB7XG4gICAgICAgIHZhciBmbCA9IChmaWVsZHMgfHwgJ25hbWUsc3R5cGUsY2F0ZWdvcnksZG9jcyxkaXNwX2VuLHNvcnRhYmxlLGZpbHRlcmFibGUsdGFibGVhYmxlLGRpc3BsYXlhYmxlLGVkaXRhYmxlJyk7XG4gICAgICAgIHJldHVybiBzdWdhci5wb3N0Rm9ybSgnc29sci9maWVsZHMvc2VsZWN0JywgdGhpcy5nZXRGaWVsZHNQYXJhbXMoZmwpKS50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuZW5zdXJlVGFnc0ZpZWxkRXhpc3QocmVzLmRhdGEucmVzcG9uc2UuZG9jcyk7XG4gICAgICAgICAgcmV0dXJuIHJlcy5kYXRhLnJlc3BvbnNlLmRvY3M7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5lbnN1cmVUYWdzRmllbGRFeGlzdCA9IChmaWVsZHM6IEFycmF5PGFueT4pID0+IHtcbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSBmaWVsZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAoZmllbGRzW2ldLm5hbWUgPT09ICd0YWdfdGFncycpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICBmaWVsZHMucHVzaCh7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ1RFWFQnLFxuICAgICAgICAgICAgZGlzcF9lbjogJ1RhZ3MnLFxuICAgICAgICAgICAgZGlzcGxheWFibGU6IHRydWUsXG4gICAgICAgICAgICBkb2NzOiAwLFxuICAgICAgICAgICAgZmlsdGVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6ICd0YWdfdGFncycsXG4gICAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBzdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB0YWJsZWFibGU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cblx0XHRcdHRoaXMuZmV0Y2hIeWRyYXRpb25TdGF0cyA9IChxdWVyeTogc3RyaW5nKSA9PiB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuZmV0Y2goKS50aGVuKChmaWVsZHM6IEFycmF5PGFueT4pID0+IHtcbiAgICAgICAgICB2YXIgZmwgPSBzdWdhci5wbHVjayhmaWVsZHMsICduYW1lJywgZnVuY3Rpb24oZmllbGQpIHsgcmV0dXJuIGZpZWxkLm5hbWUuaW5kZXhPZignXycpICE9PSAwICYmIGZpZWxkLmRvY3MgPiAwOyB9KTtcblxuICAgICAgICAgIHJldHVybiBzdWdhci5wb3N0Rm9ybSgnc29sci92MC9zZWxlY3Q/JyArIHF1ZXJ5LCB0aGlzLmdldFN0YXRzUGFyYW1zKGZsKSkudGhlbigocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHZhciBzdGF0c0ZpZWxkcyA9IHJlcy5kYXRhLmZhY2V0X2NvdW50cy5mYWNldF9maWVsZHM7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSByZXMuZGF0YS5yZXNwb25zZS5udW1Gb3VuZDtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlIeWRyYXRpb24oc3RhdHNGaWVsZHMsIGZpZWxkcywgdG90YWwpO1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cblx0XHRcdH07XG5cblx0XHR9XG5cbiAgICBwcml2YXRlIGdldEZpZWxkc1BhcmFtcyhmbCkge1xuICAgICAgcmV0dXJuICdxPSo6KiZmbD0nICsgZmwgKyAnJnJvd3M9MTAwMDAmc29ydD1uYW1lJTIwYXNjJnd0PWpzb24mcmFuZD0nICsgTWF0aC5yYW5kb20oKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgZ2V0U3RhdHNQYXJhbXMoZmwpIHtcbiAgICAgIHJldHVybiAnZmFjZXQ9dHJ1ZSZmYWNldC5saW1pdD0xMDAwMCZmYWNldC5taW5jb3VudD0xMDAmcm93cz0wJnd0PWpzb24mZmFjZXQuZmllbGQ9JyArIGZsLmpvaW4oJyZmYWNldC5maWVsZD0nKSArICcmcmFuZD0nICsgTWF0aC5yYW5kb20oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5SHlkcmF0aW9uKHN0YXRzRmllbGRzLCBmaWVsZHMsIHRvdGFsKSB7XG4gICAgICB2YXIgc3RhdHNGaWVsZCwgY291bnQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdGF0c0ZpZWxkID0gc3RhdHNGaWVsZHNbZmllbGRzW2ldLm5hbWVdO1xuICAgICAgICBpZiAoc3RhdHNGaWVsZCAmJiBzdGF0c0ZpZWxkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmaWVsZHNbaV0uaWQgPSBmaWVsZHNbaV0ubmFtZTtcbiAgICAgICAgICBjb3VudCA9IHRoaXMuZ2V0Q291bnQoc3RhdHNGaWVsZCk7XG4gICAgICAgICAgZmllbGRzW2ldLmh5ZHJhdGlvbiA9IGNvdW50IC8gdG90YWwgKiAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q291bnQoZmllbGQpIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGZpZWxkLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGNvdW50ICs9IGZpZWxkW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZmllbGRzLnJlc291cmNlLnRzXCIgLz5cclxuXHJcbm1vZHVsZSB2cy50b29scy5maWVsZHMge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy5maWVsZHMnLCBbJ3ZzLnRvb2xzLnV0aWwnXSlcclxuXHRcdC5zZXJ2aWNlKEZpZWxkc1Jlc291cmNlLnJlZk5hbWUsIEZpZWxkc1Jlc291cmNlKTtcclxuXHJcbn1cclxuIiwibW9kdWxlIHZzLnRvb2xzLmZpbHRlcnMge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLmZpbHRlcnMnLCBbXSlcbiAgICAuZmlsdGVyKCdyZXBsYWNlU3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oaGF5U3RhY2s6IHN0cmluZywgb2xkTmVlZGxlOiBzdHJpbmcsIG5ld05lZWRsZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBoYXlTdGFjay5yZXBsYWNlKG5ldyBSZWdFeHAob2xkTmVlZGxlLCAnZycpLCBuZXdOZWVkbGUpO1xuICAgICAgfTtcbiAgICB9KTtcbiB9XG4iLCJtb2R1bGUgdnMudG9vbHMuc2F2ZWRTZWFyY2gge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnNhdmVkU2VhcmNoJywgWyd2cy50b29scy51dGlsJ10pO1xyXG59XHJcbiIsIi8qZ2xvYmFsIGFuZ3VsYXIsICQsIHF1ZXJ5c3RyaW5nLCBjb25maWcgKi9cclxuZGVjbGFyZSB2YXIgY29uZmlnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnNhdmVkU2VhcmNoJykuXHJcblx0LyogQG5nSW5qZWN0ICovXHJcbiAgZmFjdG9yeSgnc2F2ZWRTZWFyY2hSZXNvdXJjZScsIGZ1bmN0aW9uICgkaHR0cDogYW55LCBzdWdhcikge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAgZnVuY3Rpb24gX2RvU2F2ZShzYXZlZFNlYXJjaDogYW55KSB7XHJcbiAgICAgICByZXR1cm4gc3VnYXIucG9zdEpzb24oc2F2ZWRTZWFyY2gsICdkaXNwbGF5JywgJ3NzZWFyY2gnKTtcclxuICAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2dldFF1ZXJ5U3RyaW5nKGlkPzogc3RyaW5nKSB7XHJcbiAgICAgIHZhciByb3dzID0gMTUwOyAgLy8gQFRPRE8gc2V0IHRvIHdoYXQgd2UgcmVhbGx5IHdhbnRcclxuICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gY29uZmlnLnJvb3QgKyAnc29sci9zc2VhcmNoL3NlbGVjdD8nO1xyXG4gICAgICBxdWVyeVN0cmluZyArPSAncm93cz0nICsgcm93cyArICcmcmFuZD0nICsgTWF0aC5yYW5kb20oKTtcclxuICAgICAgcXVlcnlTdHJpbmcgKz0gJyZmbD1pZCx0aXRsZSxkZXNjcmlwdGlvbixvd25lcixwYXRoLHNoYXJlLHF1ZXJ5LGNvbmZpZyxvcmRlcixzYXZlZCxwcml2YXRlLHZpZXcsX3ZlcnNpb25fLGNvbmZpZ190aXRsZTpbY29uZmlnVGl0bGVdLHBhcmFtKixsYWJlbHMnO1xyXG4gICAgICBxdWVyeVN0cmluZyArPSAnJnd0PWpzb24manNvbi53cmY9SlNPTl9DQUxMQkFDSyc7XHJcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpZCkpIHtcclxuICAgICAgICBxdWVyeVN0cmluZyArPSAnJmZxPWlkOicgKyBpZDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcXVlcnlTdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2V4ZWN1dGUoaWQ/OiBzdHJpbmcpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmpzb25wKF9nZXRRdWVyeVN0cmluZyhpZCkpLnRoZW4oZnVuY3Rpb24gKGRhdGE6IGFueSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhLmRhdGEucmVzcG9uc2UuZG9jcztcclxuICAgICAgfSwgZnVuY3Rpb24oZXJyb3I6IGFueSkge1xyXG4gICAgICAgIC8vIEBUT0RPOiBoYW5kbGUgZXJyb3JcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnZXRTYXZlZFNlYXJjaGVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gX2V4ZWN1dGUoKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGZldGNoOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIHJldHVybiBfZXhlY3V0ZShpZCkudGhlbihmdW5jdGlvbihkb2NzKSB7XHJcbiAgICAgICAgICByZXR1cm4gZG9jc1swXTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNhdmVTZWFyY2g6IGZ1bmN0aW9uKHNhdmVkU2VhcmNoLCBwYXJhbXMpIHtcclxuICAgICAgIC8vICBzYXZlZFNlYXJjaC5jb25maWcgPSBjb25maWdTZXJ2aWNlLmdldENvbmZpZ0lkKCk7XHJcbiAgICAgICAvLyAgc2F2ZWRTZWFyY2gucXVlcnkgPSBjb252ZXJ0ZXIudG9DbGFzc2ljUGFyYW1zKHBhcmFtcyk7XHJcbiAgICAgICByZXR1cm4gX2RvU2F2ZShzYXZlZFNlYXJjaCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkZWxldGVTZWFyY2g6IGZ1bmN0aW9uKGlkOiBzdHJpbmcpe1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvZGlzcGxheS9zc2VhcmNoLycgKyBpZCkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgIC8vIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgICAgICAgIC8vICAgZW50cnkoaWQpO1xyXG4gICAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHdpcGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvZGlzcGxheS9zc2VhcmNoL3dpcGUnKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzdWdhci5wb3N0Rm9ybSgnYXBpL3Jlc3QvZGlzcGxheS9yZXN0b3JlJywgJycpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgb3JkZXI6IGZ1bmN0aW9uKGlkOiBhbnksIGJlZm9yZUlkOiBhbnksIGFmdGVySWQ6IGFueSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gJyc7XHJcbiAgICAgICAgaWYgKGJlZm9yZUlkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBkYXRhICs9ICdiZWZvcmU9JyArIGJlZm9yZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YSAhPT0gJycpIHtcclxuICAgICAgICAgIGRhdGEgKz0gJyYnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFmdGVySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgIGRhdGEgKz0gJ2FmdGVyPScgKyBhZnRlcklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXR1cm4gc3VnYXIucG9zdEZvcm0oJ2FwaS9yZXN0L2Rpc3BsYXkvc3NlYXJjaC8nICsgaWQgKyAnL29yZGVyJywgZGF0YSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBmZXRjaExhYmVsczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHVybCA9IGNvbmZpZy5yb290ICsgJ3NvbHIvc3NlYXJjaC9zZWxlY3Q/cm93cz0wJmZhY2V0PXRydWUmZmFjZXQuZmllbGQ9bGFiZWxzJnd0PWpzb24mcj0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3AuZGF0YS5mYWNldF9jb3VudHMuZmFjZXRfZmllbGRzLmxhYmVscztcclxuICAgICAgICB9LCBmdW5jdGlvbigpIHsgIC8vIGVycm9yIGlmIGxhYmVscyBmaWVsZCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSk7XHJcbiIsIm1vZHVsZSB2cy50b29scy50cmFuc2xhdGUge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZXhwb3J0IGNsYXNzIFRyYW5zbGF0b3Ige1xuXG4gICAgcHJpdmF0ZSBmaWVsZHM6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSByZW1vdmVQcmVmaXhIYXNoID0ge307XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogYW55LCBwcml2YXRlICRodHRwOiBuZy5JSHR0cFNlcnZpY2UsIHByaXZhdGUgJHE6IG5nLklRU2VydmljZSkge1xuICAgICAgdmFyIHJlbW92ZVByZWZpeExpc3QgPSBbJ2ZzXycsICdmdF8nLCAnZmhfJywgJ2ZpXycsICdmbF8nLCAnZmRfJywgJ2ZmXycsICdmdV8nLCAnZnBfJywgJ2Z5XycsICdmbV8nLCAnZmJfJywgJ3RhZ18nLCAnbWV0YV8nLCAnZnNzXyddO1xuICAgICAgcmVtb3ZlUHJlZml4TGlzdC5mb3JFYWNoKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVQcmVmaXhIYXNoW2l0ZW1dID0gdHJ1ZTtcbiAgICAgICAgdmFyIGMgPSBpdGVtLnN1YnN0cmluZygxLCAyKTtcbiAgICAgICAgdmFyIGtleSA9IGl0ZW0ucmVwbGFjZSgnXycsIGMgKyAnXycpO1xuICAgICAgICB0aGlzLnJlbW92ZVByZWZpeEhhc2hba2V5XSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZCgpIHtcbiAgICAgIHZhciByZXNvdXJjZVVybCA9IHRoaXMuY29uZmlnLnJvb3QgKyAnYXBpL3Jlc3QvaTE4bi9maWVsZHMvc3RhbmRhcmQuanNvbic7XG5cbiAgICAgIGlmICghdGhpcy5maWVsZHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KHJlc291cmNlVXJsKS50aGVuKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuZmllbGRzID0gcmVzLmRhdGE7XG4gICAgICAgICAgcmV0dXJuIHJlcy5kYXRhO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRxLndoZW4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNsYXRlRmllbGQoZmllbGQ6IHN0cmluZykge1xuICAgICAgdmFyIGlkeCA9IGZpZWxkLmluZGV4T2YoJ18nKTtcbiAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICB2YXIgcHJlZml4ID0gZmllbGQuc3Vic3RyaW5nKDAsIGlkeCArIDEpO1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVQcmVmaXhIYXNoW3ByZWZpeF0pIHtcbiAgICAgICAgICBmaWVsZCA9IGZpZWxkLnJlcGxhY2UocHJlZml4LCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2xhdGVkID0gdGhpcy5maWVsZHMuRklFTERbZmllbGRdO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRyYW5zbGF0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NpZnkoZmllbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY2xhc3NpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9fL2csICcgJyk7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcd1xcUyovZywgZnVuY3Rpb24odHh0OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInRyYW5zbGF0b3IudHNcIiAvPlxyXG5tb2R1bGUgdnMudG9vbHMudHJhbnNsYXRlIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGRlY2xhcmUgdmFyIGNvbmZpZztcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ3ZzLnRvb2xzLnRyYW5zbGF0ZScsIFtdKVxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICAuZmFjdG9yeSgndHJhbnNsYXRvcicsIChjb25maWc6IGFueSwgJGh0dHA6IG5nLklIdHRwU2VydmljZSwgJHE6IG5nLklRU2VydmljZSkgPT4gbmV3IFRyYW5zbGF0b3IoY29uZmlnLCAkaHR0cCwgJHEpKVxyXG4gICAgLmNvbnN0YW50KCdjb25maWcnLCBjb25maWcpO1xyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzdWdhci50c1wiIC8+XHJcbm1vZHVsZSB2cy50b29scy51dGlsIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCd2cy50b29scy51dGlsJywgW10pXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIC5mYWN0b3J5KCdzdWdhcicsIChjb25maWcsICRodHRwKSA9PiBTdWdhci5nZXRJbnN0YW5jZShjb25maWcsICRodHRwKSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9"],"sourceRoot":"/source/"}