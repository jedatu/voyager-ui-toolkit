{"version":3,"sources":["vs.toolkit.min.js"],"names":[],"mappingsfile":"vs.toolkit.src.js","sourcesContent":["var vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var Config = (function () {\n            /** @ngInject */\n            function Config($logProvider) {\n                // enable log\n                $logProvider.debugEnabled(true);\n                // set options third-party lib\n            }\n            return Config;\n        })();\n        tools.Config = Config;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        var RunBlock = (function () {\n            /** @ngInject */\n            function RunBlock($log) {\n                $log.debug('runBlock end');\n            }\n            return RunBlock;\n        })();\n        tools.RunBlock = RunBlock;\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"index.config.ts\" />\n/// <reference path=\"index.run.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        'use strict';\n        angular.module('vs.tools', []).config(tools.Config).run(tools.RunBlock).constant('config', config);\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var displayConfig;\n        (function (displayConfig) {\n            'use strict';\n            angular.module('vs.tools.displayConfig', []);\n        })(displayConfig = tools.displayConfig || (tools.displayConfig = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.displayConfig').factory('displayConfigResource', function ($http) {\n    'use strict';\n    var configUri = config.root + 'api/rest/display/config/';\n    function _getListQueryString() {\n        var queryString = configUri + 'list';\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getConfigQueryString(id) {\n        var queryString = configUri + id;\n        queryString += '?rand=' + Math.random();\n        return queryString;\n    }\n    function _getDisplayConfigList() {\n        return $http.get(_getListQueryString()).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _getDisplayConfig(id) {\n        return $http.get(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _deleteDisplayConfig(id) {\n        return $http.delete(_getConfigQueryString(id)).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    function _saveDisplayConfig(template) {\n        return $http.post(configUri, template).then(function (data) {\n            return data;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getDisplayConfigs: function () {\n            return _getDisplayConfigList();\n        },\n        getDisplayConfig: function (id) {\n            return _getDisplayConfig(id);\n        },\n        deleteDisplayConfig: function (id) {\n            return _deleteDisplayConfig(id);\n        },\n        saveDisplayConfig: function (template) {\n            return _saveDisplayConfig(template);\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var filters;\n        (function (filters) {\n            'use strict';\n            angular.module('vs.tools.filters', []).filter('replaceString', function () {\n                return function (hayStack, oldNeedle, newNeedle) {\n                    return hayStack.replace(oldNeedle, newNeedle);\n                };\n            });\n        })(filters = tools.filters || (tools.filters = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            var Sugar = (function () {\n                function Sugar(config, $http) {\n                    this.config = config;\n                    this.$http = $http;\n                }\n                Sugar.isString = function (val) {\n                    return (typeof val === 'string' || val instanceof String);\n                };\n                Sugar.getInstance = function (config, $http) {\n                    return new Sugar(config, $http);\n                };\n                Sugar.prototype.toMap = function (key, array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value[key]] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.toStringMap = function (array) {\n                    var map = {};\n                    array.forEach(function (value) {\n                        map[value] = value;\n                    });\n                    return map;\n                };\n                Sugar.prototype.pluck = function (array, name, fn) {\n                    var fl = [];\n                    array.forEach(function (value) {\n                        if (fn && fn(value)) {\n                            fl.push(value[name]);\n                        }\n                        else if (angular.isUndefined(fn)) {\n                            fl.push(value[name]);\n                        }\n                    });\n                    return fl;\n                };\n                Sugar.prototype.postForm = function (url, data) {\n                    var service = this.config.root + url;\n                    return this.$http({\n                        method: 'POST',\n                        url: service,\n                        data: data,\n                        withCredentials: true,\n                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                    });\n                };\n                Sugar.prototype.parseQueryString = function (queryString) {\n                    var pairs = queryString.slice(1).split('&');\n                    var result = {}, s;\n                    pairs.forEach(function (pair) {\n                        s = pair.split('=');\n                        result[s[0]] = decodeURIComponent(s[1] || '');\n                    });\n                    return JSON.parse(JSON.stringify(result));\n                };\n                Sugar.prototype.postJson = function (request, api, action) {\n                    return this.$http({\n                        method: 'POST',\n                        url: config.root + 'api/rest/' + api + '/' + action + '.json',\n                        data: request,\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                };\n                return Sugar;\n            })();\n            util.Sugar = Sugar;\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"../util/sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (_fields) {\n            'use strict';\n            var FieldsResource = (function () {\n                /* @ngInject */\n                function FieldsResource(sugar) {\n                    var _this = this;\n                    this.sugar = sugar;\n                    this.fetch = function (fields) {\n                        var fl = (fields || 'name,category,docs,disp_en,sortable,filterable');\n                        return sugar.postForm('solr/fields/select', _this.getFieldsParams(fl)).then(function (res) {\n                            return res.data.response.docs;\n                        });\n                    };\n                    this.fetchHydrationStats = function (query) {\n                        return _this.fetch().then(function (fields) {\n                            var fl = sugar.pluck(fields, 'name', function (field) {\n                                return field.name.indexOf('_') !== 0 && field.docs > 0;\n                            });\n                            return sugar.postForm('solr/v0/select?' + query, _this.getStatsParams(fl)).then(function (res) {\n                                var statsFields = res.data.facet_counts.facet_fields;\n                                var total = res.data.response.numFound;\n                                _this.applyHydration(statsFields, fields, total);\n                                return fields;\n                            });\n                        });\n                    };\n                }\n                FieldsResource.prototype.getFieldsParams = function (fl) {\n                    return 'q=*:*&fl=' + fl + '&rows=10000&sort=name%20asc&wt=json';\n                };\n                FieldsResource.prototype.getStatsParams = function (fl) {\n                    return 'facet=true&facet.limit=10000&facet.mincount=100&rows=0&wt=json&facet.field=' + fl.join('&facet.field=');\n                };\n                FieldsResource.prototype.applyHydration = function (statsFields, fields, total) {\n                    var statsField, count;\n                    for (var i = 0; i < fields.length; i++) {\n                        statsField = statsFields[fields[i].name];\n                        if (statsField && statsField.length > 0) {\n                            fields[i].id = fields[i].name;\n                            count = this.getCount(statsField);\n                            fields[i].hydration = count / total * 100;\n                        }\n                    }\n                    return i;\n                };\n                FieldsResource.prototype.getCount = function (field) {\n                    var count = 0;\n                    for (var i = 1; i < field.length; i += 2) {\n                        count += field[i];\n                    }\n                    return count;\n                };\n                FieldsResource.refName = 'fieldsResource';\n                return FieldsResource;\n            })();\n            _fields.FieldsResource = FieldsResource;\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"../../.tmp/typings/tsd.d.ts\" />\n/// <reference path=\"./fields.resource.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var fields;\n        (function (fields) {\n            'use strict';\n            angular.module('vs.tools.fields', ['vs.tools.util']).service(fields.FieldsResource.refName, fields.FieldsResource);\n        })(fields = tools.fields || (tools.fields = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var savedSearch;\n        (function (savedSearch) {\n            'use strict';\n            angular.module('vs.tools.savedSearch', ['vs.tools.util']);\n        })(savedSearch = tools.savedSearch || (tools.savedSearch = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\nangular.module('vs.tools.savedSearch').factory('savedSearchResource', function ($http, sugar) {\n    'use strict';\n    function _doSave(savedSearch) {\n        return sugar.postJson(savedSearch, 'display', 'ssearch');\n    }\n    function _getQueryString(id) {\n        var rows = 150; // @TODO set to what we really want\n        var queryString = config.root + 'solr/ssearch/select?';\n        queryString += 'rows=' + rows + '&rand=' + Math.random();\n        queryString += '&fl=id,title,description,owner,path,share,query,config,order,saved,private,view,_version_,config_title:[configTitle],param*,labels';\n        queryString += '&wt=json&json.wrf=JSON_CALLBACK';\n        if (angular.isDefined(id)) {\n            queryString += '&fq=id:' + id;\n        }\n        return queryString;\n    }\n    function _execute(id) {\n        return $http.jsonp(_getQueryString(id)).then(function (data) {\n            return data.data.response.docs;\n        }, function (error) {\n            // @TODO: handle error\n            console.log(error);\n            return error;\n        });\n    }\n    return {\n        getSavedSearches: function () {\n            return _execute();\n        },\n        fetch: function (id) {\n            return _execute(id).then(function (docs) {\n                return docs[0];\n            });\n        },\n        saveSearch: function (savedSearch, params) {\n            //  savedSearch.config = configService.getConfigId();\n            //  savedSearch.query = converter.toClassicParams(params);\n            return _doSave(savedSearch);\n        },\n        deleteSearch: function (id) {\n            return $http.delete(config.root + 'api/rest/display/ssearch/' + id).then(function () {\n                // observers.forEach(function (entry) {\n                //   entry(id);\n                // });\n            });\n        },\n        wipe: function () {\n            return $http.delete(config.root + 'api/rest/display/ssearch/wipe');\n        },\n        restore: function () {\n            return sugar.postForm('api/rest/display/restore', '');\n        },\n        order: function (id, beforeId, afterId) {\n            var data = '';\n            if (beforeId !== null) {\n                data += 'before=' + beforeId;\n            }\n            if (data !== '') {\n                data += '&';\n            }\n            if (afterId !== null) {\n                data += 'after=' + afterId;\n            }\n            // return sugar.postForm('api/rest/display/ssearch/' + id + '/order', data);\n        },\n        fetchLabels: function () {\n            var url = config.root + 'solr/ssearch/select?rows=0&facet=true&facet.field=labels&wt=json&r=' + new Date().getTime();\n            return $http.get(url).then(function (resp) {\n                return resp.data.facet_counts.facet_fields.labels;\n            }, function () {\n                return [];\n            });\n        }\n    };\n});\n\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            var Translator = (function () {\n                /* @ngInject */\n                function Translator(config, $http, $q) {\n                    this.config = config;\n                    this.$http = $http;\n                    this.$q = $q;\n                    this.fields = null;\n                }\n                Translator.prototype.load = function () {\n                    var _this = this;\n                    var resourceUrl = this.config.root + 'api/rest/i18n/fields/standard.json';\n                    if (!this.fields) {\n                        return this.$http.get(resourceUrl).then(function (res) {\n                            _this.fields = res.data;\n                            return res.data;\n                        });\n                    }\n                    else {\n                        return this.$q.when();\n                    }\n                };\n                Translator.prototype.translateField = function (field) {\n                    var translated = this.fields.FIELD[field];\n                    if (angular.isDefined(translated)) {\n                        return translated;\n                    }\n                    else {\n                        return this.classify(field);\n                    }\n                };\n                Translator.prototype.classify = function (str) {\n                    str = str.replace(/_/g, ' ');\n                    return str.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    });\n                };\n                return Translator;\n            })();\n            translate.Translator = Translator;\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"translator.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var translate;\n        (function (translate) {\n            'use strict';\n            angular.module('vs.tools.translate', []).factory('translator', function (config, $http, $q) { return new translate.Translator(config, $http, $q); }).constant('config', config);\n        })(translate = tools.translate || (tools.translate = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n/// <reference path=\"sugar.ts\" />\nvar vs;\n(function (vs) {\n    var tools;\n    (function (tools) {\n        var util;\n        (function (util) {\n            'use strict';\n            angular.module('vs.tools.util', []).factory('sugar', function (config, $http) { return util.Sugar.getInstance(config, $http); });\n        })(util = tools.util || (tools.util = {}));\n    })(tools = vs.tools || (vs.tools = {}));\n})(vs || (vs = {}));\n\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":"/source/"}